<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AInq.Background.Enumerable</name>
    </assembly>
    <members>
        <member name="T:AInq.Background.AccessQueueEnumerableExtension">
            <summary> <see cref="T:AInq.Background.Services.IPriorityAccessQueue`1" /> and <see cref="T:AInq.Background.Services.IAccessQueue`1" /> batch processing extension </summary>
        </member>
        <member name="M:AInq.Background.AccessQueueEnumerableExtension.AccessAsync``2(AInq.Background.Services.IAccessQueue{``0},System.Collections.Generic.IEnumerable{AInq.Background.Tasks.IAccess{``0,``1}},System.Threading.CancellationToken,System.Int32,System.Boolean)">
            <summary> Batch process access actions </summary>
            <param name="accessQueue"> Access Queue instance </param>
            <param name="accesses"> Access actions to process </param>
            <param name="cancellation"> Processing cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="enqueueAll"> Option to enqueue all data first </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <typeparam name="TResult"> Processing result type </typeparam>
            <returns> Processing result task enumeration </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="accesses" /> or <paramref name="accesses" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.AccessQueueEnumerableExtension.AccessAsync``2(System.Collections.Generic.IEnumerable{AInq.Background.Tasks.IAccess{``0,``1}},AInq.Background.Services.IAccessQueue{``0},System.Threading.CancellationToken,System.Int32,System.Boolean)">
            <inheritdoc cref="M:AInq.Background.AccessQueueEnumerableExtension.AccessAsync``2(AInq.Background.Services.IAccessQueue{``0},System.Collections.Generic.IEnumerable{AInq.Background.Tasks.IAccess{``0,``1}},System.Threading.CancellationToken,System.Int32,System.Boolean)" />
        </member>
        <member name="M:AInq.Background.AccessQueueEnumerableExtension.AccessAsync``2(AInq.Background.Services.IPriorityAccessQueue{``0},System.Collections.Generic.IEnumerable{AInq.Background.Tasks.IAccess{``0,``1}},System.Int32,System.Threading.CancellationToken,System.Int32,System.Boolean)">
            <summary> Batch process access actions with giver <paramref name="priority" /> </summary>
            <param name="accessQueue"> Access Queue instance </param>
            <param name="accesses"> Access actions to process </param>
            <param name="priority"> Operation priority </param>
            <param name="cancellation"> Processing cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="enqueueAll"> Option to enqueue all data first </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <typeparam name="TResult"> Processing result type </typeparam>
            <returns> Processing result task enumeration </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="accessQueue" /> or <paramref name="accesses" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.AccessQueueEnumerableExtension.AccessAsync``2(System.Collections.Generic.IEnumerable{AInq.Background.Tasks.IAccess{``0,``1}},AInq.Background.Services.IPriorityAccessQueue{``0},System.Threading.CancellationToken,System.Int32,System.Int32,System.Boolean)">
            <inheritdoc cref="M:AInq.Background.AccessQueueEnumerableExtension.AccessAsync``2(AInq.Background.Services.IPriorityAccessQueue{``0},System.Collections.Generic.IEnumerable{AInq.Background.Tasks.IAccess{``0,``1}},System.Int32,System.Threading.CancellationToken,System.Int32,System.Boolean)" />
        </member>
        <member name="M:AInq.Background.AccessQueueEnumerableExtension.AccessAsync``2(System.IServiceProvider,System.Collections.Generic.IEnumerable{AInq.Background.Tasks.IAccess{``0,``1}},System.Threading.CancellationToken,System.Int32,System.Boolean,System.Int32)">
            <summary> Batch process access actions using registered access queue with giver <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="accesses"> Access actions to process </param>
            <param name="cancellation"> Processing cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Operation priority </param>
            <param name="enqueueAll"> Option to enqueue all data first </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <typeparam name="TResult"> Processing result type </typeparam>
            <returns> Processing result task enumeration </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access queue for <typeparamref name="TResource" /> is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> or <paramref name="accesses" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.AccessQueueEnumerableExtension.AccessAsync``2(AInq.Background.Services.IAccessQueue{``0},System.Collections.Generic.IEnumerable{AInq.Background.Tasks.IAsyncAccess{``0,``1}},System.Threading.CancellationToken,System.Int32,System.Boolean)">
            <summary> Batch process asynchronous access actions </summary>
            <param name="accessQueue"> Access Queue instance </param>
            <param name="accesses"> Access actions to process </param>
            <param name="cancellation"> Processing cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="enqueueAll"> Option to enqueue all data first </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <typeparam name="TResult"> Processing result type </typeparam>
            <returns> Processing result task enumeration </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="accessQueue" /> or <paramref name="accesses" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.AccessQueueEnumerableExtension.AccessAsync``2(System.Collections.Generic.IEnumerable{AInq.Background.Tasks.IAsyncAccess{``0,``1}},AInq.Background.Services.IAccessQueue{``0},System.Threading.CancellationToken,System.Int32,System.Boolean)">
            <inheritdoc cref="M:AInq.Background.AccessQueueEnumerableExtension.AccessAsync``2(AInq.Background.Services.IAccessQueue{``0},System.Collections.Generic.IEnumerable{AInq.Background.Tasks.IAsyncAccess{``0,``1}},System.Threading.CancellationToken,System.Int32,System.Boolean)" />
        </member>
        <member name="M:AInq.Background.AccessQueueEnumerableExtension.AccessAsync``2(AInq.Background.Services.IPriorityAccessQueue{``0},System.Collections.Generic.IEnumerable{AInq.Background.Tasks.IAsyncAccess{``0,``1}},System.Int32,System.Threading.CancellationToken,System.Int32,System.Boolean)">
            <summary> Batch process asynchronous access actions with giver <paramref name="priority" /> </summary>
            <param name="accessQueue"> Access Queue instance </param>
            <param name="accesses"> Access actions to process </param>
            <param name="priority"> Operation priority </param>
            <param name="cancellation"> Processing cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="enqueueAll"> Option to enqueue all data first </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <typeparam name="TResult"> Processing result type </typeparam>
            <returns> Processing result task enumeration </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="accessQueue" /> or <paramref name="accesses" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.AccessQueueEnumerableExtension.AccessAsync``2(System.Collections.Generic.IEnumerable{AInq.Background.Tasks.IAsyncAccess{``0,``1}},AInq.Background.Services.IPriorityAccessQueue{``0},System.Threading.CancellationToken,System.Int32,System.Int32,System.Boolean)">
            <inheritdoc cref="M:AInq.Background.AccessQueueEnumerableExtension.AccessAsync``2(AInq.Background.Services.IPriorityAccessQueue{``0},System.Collections.Generic.IEnumerable{AInq.Background.Tasks.IAsyncAccess{``0,``1}},System.Int32,System.Threading.CancellationToken,System.Int32,System.Boolean)" />
        </member>
        <member name="M:AInq.Background.AccessQueueEnumerableExtension.AccessAsync``2(System.IServiceProvider,System.Collections.Generic.IEnumerable{AInq.Background.Tasks.IAsyncAccess{``0,``1}},System.Threading.CancellationToken,System.Int32,System.Boolean,System.Int32)">
            <summary> Batch process asynchronous access actions using registered access queue with giver <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="accesses"> Access actions to process </param>
            <param name="cancellation"> Processing cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Operation priority </param>
            <param name="enqueueAll"> Option to enqueue all data first </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <typeparam name="TResult"> Processing result type </typeparam>
            <returns> Processing result task enumeration </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access queue for <typeparamref name="TResource" /> is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> or <paramref name="accesses" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.AccessQueueEnumerableExtension.AccessAsync``2(AInq.Background.Services.IAccessQueue{``0},System.Collections.Generic.IAsyncEnumerable{AInq.Background.Tasks.IAccess{``0,``1}},System.Threading.CancellationToken,System.Int32)">
            <inheritdoc cref="M:AInq.Background.AccessQueueEnumerableExtension.AccessAsync``2(AInq.Background.Services.IAccessQueue{``0},System.Collections.Generic.IEnumerable{AInq.Background.Tasks.IAccess{``0,``1}},System.Threading.CancellationToken,System.Int32,System.Boolean)" />
        </member>
        <member name="M:AInq.Background.AccessQueueEnumerableExtension.AccessAsync``2(System.Collections.Generic.IAsyncEnumerable{AInq.Background.Tasks.IAccess{``0,``1}},AInq.Background.Services.IAccessQueue{``0},System.Threading.CancellationToken,System.Int32)">
            <inheritdoc cref="M:AInq.Background.AccessQueueEnumerableExtension.AccessAsync``2(AInq.Background.Services.IAccessQueue{``0},System.Collections.Generic.IEnumerable{AInq.Background.Tasks.IAccess{``0,``1}},System.Threading.CancellationToken,System.Int32,System.Boolean)" />
        </member>
        <member name="M:AInq.Background.AccessQueueEnumerableExtension.AccessAsync``2(AInq.Background.Services.IPriorityAccessQueue{``0},System.Collections.Generic.IAsyncEnumerable{AInq.Background.Tasks.IAccess{``0,``1}},System.Int32,System.Threading.CancellationToken,System.Int32)">
            <inheritdoc cref="M:AInq.Background.AccessQueueEnumerableExtension.AccessAsync``2(AInq.Background.Services.IPriorityAccessQueue{``0},System.Collections.Generic.IEnumerable{AInq.Background.Tasks.IAccess{``0,``1}},System.Int32,System.Threading.CancellationToken,System.Int32,System.Boolean)" />
        </member>
        <member name="M:AInq.Background.AccessQueueEnumerableExtension.AccessAsync``2(System.Collections.Generic.IAsyncEnumerable{AInq.Background.Tasks.IAccess{``0,``1}},AInq.Background.Services.IPriorityAccessQueue{``0},System.Int32,System.Threading.CancellationToken,System.Int32)">
            <inheritdoc cref="M:AInq.Background.AccessQueueEnumerableExtension.AccessAsync``2(AInq.Background.Services.IPriorityAccessQueue{``0},System.Collections.Generic.IEnumerable{AInq.Background.Tasks.IAccess{``0,``1}},System.Int32,System.Threading.CancellationToken,System.Int32,System.Boolean)" />
        </member>
        <member name="M:AInq.Background.AccessQueueEnumerableExtension.AccessAsync``2(System.IServiceProvider,System.Collections.Generic.IAsyncEnumerable{AInq.Background.Tasks.IAccess{``0,``1}},System.Threading.CancellationToken,System.Int32,System.Int32)">
            <inheritdoc cref="M:AInq.Background.AccessQueueEnumerableExtension.AccessAsync``2(System.IServiceProvider,System.Collections.Generic.IEnumerable{AInq.Background.Tasks.IAccess{``0,``1}},System.Threading.CancellationToken,System.Int32,System.Boolean,System.Int32)" />
        </member>
        <member name="M:AInq.Background.AccessQueueEnumerableExtension.AccessAsync``2(AInq.Background.Services.IAccessQueue{``0},System.Collections.Generic.IAsyncEnumerable{AInq.Background.Tasks.IAsyncAccess{``0,``1}},System.Threading.CancellationToken,System.Int32)">
            <inheritdoc cref="M:AInq.Background.AccessQueueEnumerableExtension.AccessAsync``2(AInq.Background.Services.IAccessQueue{``0},System.Collections.Generic.IEnumerable{AInq.Background.Tasks.IAsyncAccess{``0,``1}},System.Threading.CancellationToken,System.Int32,System.Boolean)" />
        </member>
        <member name="M:AInq.Background.AccessQueueEnumerableExtension.AccessAsync``2(System.Collections.Generic.IAsyncEnumerable{AInq.Background.Tasks.IAsyncAccess{``0,``1}},AInq.Background.Services.IAccessQueue{``0},System.Threading.CancellationToken,System.Int32)">
            <inheritdoc cref="M:AInq.Background.AccessQueueEnumerableExtension.AccessAsync``2(AInq.Background.Services.IAccessQueue{``0},System.Collections.Generic.IEnumerable{AInq.Background.Tasks.IAsyncAccess{``0,``1}},System.Threading.CancellationToken,System.Int32,System.Boolean)" />
        </member>
        <member name="M:AInq.Background.AccessQueueEnumerableExtension.AccessAsync``2(AInq.Background.Services.IPriorityAccessQueue{``0},System.Collections.Generic.IAsyncEnumerable{AInq.Background.Tasks.IAsyncAccess{``0,``1}},System.Int32,System.Threading.CancellationToken,System.Int32)">
            <inheritdoc cref="M:AInq.Background.AccessQueueEnumerableExtension.AccessAsync``2(AInq.Background.Services.IPriorityAccessQueue{``0},System.Collections.Generic.IEnumerable{AInq.Background.Tasks.IAsyncAccess{``0,``1}},System.Int32,System.Threading.CancellationToken,System.Int32,System.Boolean)" />
        </member>
        <member name="M:AInq.Background.AccessQueueEnumerableExtension.AccessAsync``2(System.Collections.Generic.IAsyncEnumerable{AInq.Background.Tasks.IAsyncAccess{``0,``1}},AInq.Background.Services.IPriorityAccessQueue{``0},System.Int32,System.Threading.CancellationToken,System.Int32)">
            <inheritdoc cref="M:AInq.Background.AccessQueueEnumerableExtension.AccessAsync``2(AInq.Background.Services.IPriorityAccessQueue{``0},System.Collections.Generic.IEnumerable{AInq.Background.Tasks.IAsyncAccess{``0,``1}},System.Int32,System.Threading.CancellationToken,System.Int32,System.Boolean)" />
        </member>
        <member name="M:AInq.Background.AccessQueueEnumerableExtension.AccessAsync``2(System.IServiceProvider,System.Collections.Generic.IAsyncEnumerable{AInq.Background.Tasks.IAsyncAccess{``0,``1}},System.Threading.CancellationToken,System.Int32,System.Int32)">
            <inheritdoc cref="M:AInq.Background.AccessQueueEnumerableExtension.AccessAsync``2(System.IServiceProvider,System.Collections.Generic.IEnumerable{AInq.Background.Tasks.IAsyncAccess{``0,``1}},System.Threading.CancellationToken,System.Int32,System.Boolean,System.Int32)" />
        </member>
        <member name="T:AInq.Background.ConveyorEnumerableExtension">
            <summary> <see cref="T:AInq.Background.Services.IConveyor`2" /> and <see cref="T:AInq.Background.Services.IPriorityConveyor`2" /> batch processing extension </summary>
        </member>
        <member name="M:AInq.Background.ConveyorEnumerableExtension.ProcessDataAsync``2(AInq.Background.Services.IConveyor{``0,``1},System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken,System.Int32,System.Boolean)">
            <summary> Batch process data </summary>
            <param name="conveyor"> Conveyor instance </param>
            <param name="data"> Data to process </param>
            <param name="cancellation"> Processing cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="enqueueAll"> Option to enqueue all data first </param>
            <typeparam name="TData"> Input data type </typeparam>
            <typeparam name="TResult"> Processing result type </typeparam>
            <returns> Processing result task enumeration </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="conveyor" /> or <paramref name="data" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.ConveyorEnumerableExtension.ProcessDataAsync``2(System.Collections.Generic.IEnumerable{``0},AInq.Background.Services.IConveyor{``0,``1},System.Threading.CancellationToken,System.Int32,System.Boolean)">
            <inheritdoc cref="M:AInq.Background.ConveyorEnumerableExtension.ProcessDataAsync``2(AInq.Background.Services.IConveyor{``0,``1},System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken,System.Int32,System.Boolean)" />
        </member>
        <member name="M:AInq.Background.ConveyorEnumerableExtension.ProcessDataAsync``2(AInq.Background.Services.IPriorityConveyor{``0,``1},System.Collections.Generic.IEnumerable{``0},System.Int32,System.Threading.CancellationToken,System.Int32,System.Boolean)">
            <summary> Batch process data with giver <paramref name="priority" /> </summary>
            <param name="conveyor"> Conveyor instance </param>
            <param name="data"> Data to process </param>
            <param name="cancellation"> Processing cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Operation priority </param>
            <param name="enqueueAll"> Option to enqueue all data first </param>
            <typeparam name="TData"> Input data type </typeparam>
            <typeparam name="TResult"> Processing result type </typeparam>
            <returns> Processing result task enumeration </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="conveyor" /> or <paramref name="data" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.ConveyorEnumerableExtension.ProcessDataAsync``2(System.Collections.Generic.IEnumerable{``0},AInq.Background.Services.IPriorityConveyor{``0,``1},System.Int32,System.Threading.CancellationToken,System.Int32,System.Boolean)">
            <inheritdoc cref="M:AInq.Background.ConveyorEnumerableExtension.ProcessDataAsync``2(AInq.Background.Services.IPriorityConveyor{``0,``1},System.Collections.Generic.IEnumerable{``0},System.Int32,System.Threading.CancellationToken,System.Int32,System.Boolean)" />
        </member>
        <member name="M:AInq.Background.ConveyorEnumerableExtension.ProcessDataAsync``2(System.IServiceProvider,System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken,System.Int32,System.Boolean,System.Int32)">
            <summary> Batch process data using registered conveyor with giver <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="data"> Data to process </param>
            <param name="cancellation"> Processing cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Operation priority </param>
            <param name="enqueueAll"> Option to enqueue all data first </param>
            <typeparam name="TData"> Input data type </typeparam>
            <typeparam name="TResult"> Processing result type </typeparam>
            <returns> Processing result task enumeration </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> or <paramref name="data" /> is NULL </exception>
            <exception cref="T:System.InvalidOperationException"> Thrown if no conveyor for given <typeparamref name="TData" /> and <typeparamref name="TResult" /> is registered </exception>
        </member>
        <member name="M:AInq.Background.ConveyorEnumerableExtension.ProcessDataAsync``2(AInq.Background.Services.IConveyor{``0,``1},System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken,System.Int32)">
            <inheritdoc cref="M:AInq.Background.ConveyorEnumerableExtension.ProcessDataAsync``2(AInq.Background.Services.IConveyor{``0,``1},System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken,System.Int32,System.Boolean)" />
        </member>
        <member name="M:AInq.Background.ConveyorEnumerableExtension.ProcessDataAsync``2(System.Collections.Generic.IAsyncEnumerable{``0},AInq.Background.Services.IConveyor{``0,``1},System.Threading.CancellationToken,System.Int32)">
            <inheritdoc cref="M:AInq.Background.ConveyorEnumerableExtension.ProcessDataAsync``2(AInq.Background.Services.IConveyor{``0,``1},System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken,System.Int32,System.Boolean)" />
        </member>
        <member name="M:AInq.Background.ConveyorEnumerableExtension.ProcessDataAsync``2(AInq.Background.Services.IPriorityConveyor{``0,``1},System.Collections.Generic.IAsyncEnumerable{``0},System.Int32,System.Threading.CancellationToken,System.Int32)">
            <inheritdoc cref="M:AInq.Background.ConveyorEnumerableExtension.ProcessDataAsync``2(AInq.Background.Services.IPriorityConveyor{``0,``1},System.Collections.Generic.IEnumerable{``0},System.Int32,System.Threading.CancellationToken,System.Int32,System.Boolean)" />
        </member>
        <member name="M:AInq.Background.ConveyorEnumerableExtension.ProcessDataAsync``2(System.Collections.Generic.IAsyncEnumerable{``0},AInq.Background.Services.IPriorityConveyor{``0,``1},System.Int32,System.Threading.CancellationToken,System.Int32)">
            <inheritdoc cref="M:AInq.Background.ConveyorEnumerableExtension.ProcessDataAsync``2(AInq.Background.Services.IPriorityConveyor{``0,``1},System.Collections.Generic.IEnumerable{``0},System.Int32,System.Threading.CancellationToken,System.Int32,System.Boolean)" />
        </member>
        <member name="M:AInq.Background.ConveyorEnumerableExtension.ProcessDataAsync``2(System.IServiceProvider,System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken,System.Int32,System.Int32)">
            <inheritdoc cref="M:AInq.Background.ConveyorEnumerableExtension.ProcessDataAsync``2(System.IServiceProvider,System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken,System.Int32,System.Boolean,System.Int32)" />
        </member>
        <member name="T:AInq.Background.WorkQueueEnumerableExtension">
            <summary> <see cref="T:AInq.Background.Services.IWorkQueue" /> and <see cref="T:AInq.Background.Services.IPriorityWorkQueue" /> batch processing extension </summary>
        </member>
        <member name="M:AInq.Background.WorkQueueEnumerableExtension.DoWorkAsync``1(AInq.Background.Services.IWorkQueue,System.Collections.Generic.IEnumerable{AInq.Background.Tasks.IWork{``0}},System.Threading.CancellationToken,System.Int32,System.Boolean)">
            <summary> Batch process works </summary>
            <param name="queue"> Work Queue instance </param>
            <param name="works"> Works to process </param>
            <param name="cancellation"> Processing cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="enqueueAll"> Option to enqueue all data first </param>
            <typeparam name="TResult"> Processing result type </typeparam>
            <returns> Processing result task enumeration </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="queue" /> or <paramref name="works" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.WorkQueueEnumerableExtension.DoWorkAsync``1(System.Collections.Generic.IEnumerable{AInq.Background.Tasks.IWork{``0}},AInq.Background.Services.IWorkQueue,System.Threading.CancellationToken,System.Int32,System.Boolean)">
            <inheritdoc cref="M:AInq.Background.WorkQueueEnumerableExtension.DoWorkAsync``1(AInq.Background.Services.IWorkQueue,System.Collections.Generic.IEnumerable{AInq.Background.Tasks.IWork{``0}},System.Threading.CancellationToken,System.Int32,System.Boolean)" />
        </member>
        <member name="M:AInq.Background.WorkQueueEnumerableExtension.DoWorkAsync``1(AInq.Background.Services.IPriorityWorkQueue,System.Collections.Generic.IEnumerable{AInq.Background.Tasks.IWork{``0}},System.Int32,System.Threading.CancellationToken,System.Int32,System.Boolean)">
            <summary> Batch process works with giver <paramref name="priority" /> </summary>
            <param name="queue"> Work Queue instance </param>
            <param name="works"> Works to process </param>
            <param name="cancellation"> Processing cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Operation priority </param>
            <param name="enqueueAll"> Option to enqueue all data first </param>
            <typeparam name="TResult"> Processing result type </typeparam>
            <returns> Processing result task enumeration </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="queue" /> or <paramref name="works" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.WorkQueueEnumerableExtension.DoWorkAsync``1(System.Collections.Generic.IEnumerable{AInq.Background.Tasks.IWork{``0}},AInq.Background.Services.IPriorityWorkQueue,System.Int32,System.Threading.CancellationToken,System.Int32,System.Boolean)">
            <inheritdoc cref="M:AInq.Background.WorkQueueEnumerableExtension.DoWorkAsync``1(AInq.Background.Services.IPriorityWorkQueue,System.Collections.Generic.IEnumerable{AInq.Background.Tasks.IWork{``0}},System.Int32,System.Threading.CancellationToken,System.Int32,System.Boolean)" />
        </member>
        <member name="M:AInq.Background.WorkQueueEnumerableExtension.DoWorkAsync``1(System.IServiceProvider,System.Collections.Generic.IEnumerable{AInq.Background.Tasks.IWork{``0}},System.Threading.CancellationToken,System.Int32,System.Boolean,System.Int32)">
            <summary> Batch process works using registered work queue with giver <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="works"> Works to process </param>
            <param name="cancellation"> Processing cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Operation priority </param>
            <param name="enqueueAll"> Option to enqueue all data first </param>
            <typeparam name="TResult"> Processing result type </typeparam>
            <returns> Processing result task enumeration </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work queue is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> or <paramref name="works" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.WorkQueueEnumerableExtension.DoWorkAsync``1(AInq.Background.Services.IWorkQueue,System.Collections.Generic.IEnumerable{AInq.Background.Tasks.IAsyncWork{``0}},System.Threading.CancellationToken,System.Int32,System.Boolean)">
            <summary> Batch process asynchronous works </summary>
            <param name="queue"> Work Queue instance </param>
            <param name="works"> Works to process </param>
            <param name="cancellation"> Processing cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="enqueueAll"> Option to enqueue all data first </param>
            <typeparam name="TResult"> Processing result type </typeparam>
            <returns> Processing result task enumeration </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="queue" /> or <paramref name="works" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.WorkQueueEnumerableExtension.DoWorkAsync``1(System.Collections.Generic.IEnumerable{AInq.Background.Tasks.IAsyncWork{``0}},AInq.Background.Services.IWorkQueue,System.Threading.CancellationToken,System.Int32,System.Boolean)">
            <inheritdoc cref="M:AInq.Background.WorkQueueEnumerableExtension.DoWorkAsync``1(AInq.Background.Services.IWorkQueue,System.Collections.Generic.IEnumerable{AInq.Background.Tasks.IAsyncWork{``0}},System.Threading.CancellationToken,System.Int32,System.Boolean)" />
        </member>
        <member name="M:AInq.Background.WorkQueueEnumerableExtension.DoWorkAsync``1(AInq.Background.Services.IPriorityWorkQueue,System.Collections.Generic.IEnumerable{AInq.Background.Tasks.IAsyncWork{``0}},System.Int32,System.Threading.CancellationToken,System.Int32,System.Boolean)">
            <summary> Batch process works asynchronous with giver <paramref name="priority" /> </summary>
            <param name="queue"> Work Queue instance </param>
            <param name="works"> Works to process </param>
            <param name="cancellation"> Processing cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Operation priority </param>
            <param name="enqueueAll"> Option to enqueue all data first </param>
            <typeparam name="TResult"> Processing result type </typeparam>
            <returns> Processing result task enumeration </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="queue" /> or <paramref name="works" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.WorkQueueEnumerableExtension.DoWorkAsync``1(System.Collections.Generic.IEnumerable{AInq.Background.Tasks.IAsyncWork{``0}},AInq.Background.Services.IPriorityWorkQueue,System.Int32,System.Threading.CancellationToken,System.Int32,System.Boolean)">
            <inheritdoc cref="M:AInq.Background.WorkQueueEnumerableExtension.DoWorkAsync``1(AInq.Background.Services.IPriorityWorkQueue,System.Collections.Generic.IEnumerable{AInq.Background.Tasks.IAsyncWork{``0}},System.Int32,System.Threading.CancellationToken,System.Int32,System.Boolean)" />
        </member>
        <member name="M:AInq.Background.WorkQueueEnumerableExtension.DoWorkAsync``1(System.IServiceProvider,System.Collections.Generic.IEnumerable{AInq.Background.Tasks.IAsyncWork{``0}},System.Threading.CancellationToken,System.Int32,System.Boolean,System.Int32)">
            <summary> Batch process asynchronous works using registered work queue with giver <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="works"> Works to process </param>
            <param name="cancellation"> Processing cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Operation priority </param>
            <param name="enqueueAll"> Option to enqueue all data first </param>
            <typeparam name="TResult"> Processing result type </typeparam>
            <returns> Processing result task enumeration </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work queue is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> or <paramref name="works" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.WorkQueueEnumerableExtension.DoWorkAsync``1(AInq.Background.Services.IWorkQueue,System.Collections.Generic.IAsyncEnumerable{AInq.Background.Tasks.IWork{``0}},System.Threading.CancellationToken,System.Int32)">
            <inheritdoc cref="M:AInq.Background.WorkQueueEnumerableExtension.DoWorkAsync``1(AInq.Background.Services.IWorkQueue,System.Collections.Generic.IEnumerable{AInq.Background.Tasks.IWork{``0}},System.Threading.CancellationToken,System.Int32,System.Boolean)" />
        </member>
        <member name="M:AInq.Background.WorkQueueEnumerableExtension.DoWorkAsync``1(System.Collections.Generic.IAsyncEnumerable{AInq.Background.Tasks.IWork{``0}},AInq.Background.Services.IWorkQueue,System.Threading.CancellationToken,System.Int32)">
            <inheritdoc cref="M:AInq.Background.WorkQueueEnumerableExtension.DoWorkAsync``1(AInq.Background.Services.IWorkQueue,System.Collections.Generic.IEnumerable{AInq.Background.Tasks.IWork{``0}},System.Threading.CancellationToken,System.Int32,System.Boolean)" />
        </member>
        <member name="M:AInq.Background.WorkQueueEnumerableExtension.DoWorkAsync``1(AInq.Background.Services.IPriorityWorkQueue,System.Collections.Generic.IAsyncEnumerable{AInq.Background.Tasks.IWork{``0}},System.Int32,System.Threading.CancellationToken,System.Int32)">
            <inheritdoc cref="M:AInq.Background.WorkQueueEnumerableExtension.DoWorkAsync``1(AInq.Background.Services.IPriorityWorkQueue,System.Collections.Generic.IEnumerable{AInq.Background.Tasks.IWork{``0}},System.Int32,System.Threading.CancellationToken,System.Int32,System.Boolean)" />
        </member>
        <member name="M:AInq.Background.WorkQueueEnumerableExtension.DoWorkAsync``1(System.Collections.Generic.IAsyncEnumerable{AInq.Background.Tasks.IWork{``0}},AInq.Background.Services.IPriorityWorkQueue,System.Int32,System.Threading.CancellationToken,System.Int32)">
            <inheritdoc cref="M:AInq.Background.WorkQueueEnumerableExtension.DoWorkAsync``1(AInq.Background.Services.IPriorityWorkQueue,System.Collections.Generic.IEnumerable{AInq.Background.Tasks.IWork{``0}},System.Int32,System.Threading.CancellationToken,System.Int32,System.Boolean)" />
        </member>
        <member name="M:AInq.Background.WorkQueueEnumerableExtension.DoWorkAsync``1(System.IServiceProvider,System.Collections.Generic.IAsyncEnumerable{AInq.Background.Tasks.IWork{``0}},System.Threading.CancellationToken,System.Int32,System.Int32)">
            <inheritdoc cref="M:AInq.Background.WorkQueueEnumerableExtension.DoWorkAsync``1(System.IServiceProvider,System.Collections.Generic.IEnumerable{AInq.Background.Tasks.IWork{``0}},System.Threading.CancellationToken,System.Int32,System.Boolean,System.Int32)" />
        </member>
        <member name="M:AInq.Background.WorkQueueEnumerableExtension.DoWorkAsync``1(AInq.Background.Services.IWorkQueue,System.Collections.Generic.IAsyncEnumerable{AInq.Background.Tasks.IAsyncWork{``0}},System.Threading.CancellationToken,System.Int32)">
            <inheritdoc cref="M:AInq.Background.WorkQueueEnumerableExtension.DoWorkAsync``1(AInq.Background.Services.IWorkQueue,System.Collections.Generic.IEnumerable{AInq.Background.Tasks.IAsyncWork{``0}},System.Threading.CancellationToken,System.Int32,System.Boolean)" />
        </member>
        <member name="M:AInq.Background.WorkQueueEnumerableExtension.DoWorkAsync``1(System.Collections.Generic.IAsyncEnumerable{AInq.Background.Tasks.IAsyncWork{``0}},AInq.Background.Services.IWorkQueue,System.Threading.CancellationToken,System.Int32)">
            <inheritdoc cref="M:AInq.Background.WorkQueueEnumerableExtension.DoWorkAsync``1(AInq.Background.Services.IWorkQueue,System.Collections.Generic.IEnumerable{AInq.Background.Tasks.IAsyncWork{``0}},System.Threading.CancellationToken,System.Int32,System.Boolean)" />
        </member>
        <member name="M:AInq.Background.WorkQueueEnumerableExtension.DoWorkAsync``1(AInq.Background.Services.IPriorityWorkQueue,System.Collections.Generic.IAsyncEnumerable{AInq.Background.Tasks.IAsyncWork{``0}},System.Int32,System.Threading.CancellationToken,System.Int32)">
            <inheritdoc cref="M:AInq.Background.WorkQueueEnumerableExtension.DoWorkAsync``1(AInq.Background.Services.IPriorityWorkQueue,System.Collections.Generic.IEnumerable{AInq.Background.Tasks.IAsyncWork{``0}},System.Int32,System.Threading.CancellationToken,System.Int32,System.Boolean)" />
        </member>
        <member name="M:AInq.Background.WorkQueueEnumerableExtension.DoWorkAsync``1(System.Collections.Generic.IAsyncEnumerable{AInq.Background.Tasks.IAsyncWork{``0}},AInq.Background.Services.IPriorityWorkQueue,System.Int32,System.Threading.CancellationToken,System.Int32)">
            <inheritdoc cref="M:AInq.Background.WorkQueueEnumerableExtension.DoWorkAsync``1(AInq.Background.Services.IPriorityWorkQueue,System.Collections.Generic.IEnumerable{AInq.Background.Tasks.IAsyncWork{``0}},System.Int32,System.Threading.CancellationToken,System.Int32,System.Boolean)" />
        </member>
        <member name="M:AInq.Background.WorkQueueEnumerableExtension.DoWorkAsync``1(System.IServiceProvider,System.Collections.Generic.IAsyncEnumerable{AInq.Background.Tasks.IAsyncWork{``0}},System.Threading.CancellationToken,System.Int32,System.Int32)">
            <inheritdoc cref="M:AInq.Background.WorkQueueEnumerableExtension.DoWorkAsync``1(System.IServiceProvider,System.Collections.Generic.IEnumerable{AInq.Background.Tasks.IAsyncWork{``0}},System.Threading.CancellationToken,System.Int32,System.Boolean,System.Int32)" />
        </member>
    </members>
</doc>
