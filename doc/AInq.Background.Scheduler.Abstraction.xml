<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AInq.Background.Scheduler.Abstraction</name>
    </assembly>
    <members>
        <member name="T:AInq.Background.Extensions.WorkSchedulerDelayExtension">
            <summary> <see cref="T:AInq.Background.Services.IWorkScheduler" /> extensions to schedule work with delayed start </summary>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDelayExtension.AddScheduledWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork,System.TimeSpan,System.Threading.CancellationToken)">
            <summary> Add delayed work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater than 00:00:00.000 </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDelayExtension.AddScheduledWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork{``0},System.TimeSpan,System.Threading.CancellationToken)">
            <summary> Add delayed work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater than 00:00:00.000 </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDelayExtension.AddScheduledAsyncWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork,System.TimeSpan,System.Threading.CancellationToken)">
            <summary> Add delayed asynchronous work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater than 00:00:00.000 </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDelayExtension.AddScheduledAsyncWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork{``0},System.TimeSpan,System.Threading.CancellationToken)">
            <summary> Add delayed asynchronous work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater than 00:00:00.000 </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDelayExtension.AddRepeatedWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00.000 or <paramref name="execCount" /> is 0 or less than -1 </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDelayExtension.AddRepeatedWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork{``0},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00.000 or <paramref name="execCount" /> is 0 or less than -1 </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDelayExtension.AddRepeatedAsyncWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated asynchronous work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00.000 or <paramref name="execCount" /> is 0 or less than -1 </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDelayExtension.AddRepeatedAsyncWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork{``0},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated asynchronous work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00.000 or <paramref name="execCount" /> is 0 or less than -1 </exception>
        </member>
        <member name="T:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension">
            <summary> <see cref="T:AInq.Background.Services.IWorkScheduler" /> extensions to schedule work from DI </summary>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddScheduledWork``1(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken)">
            <summary> Add scheduled work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TWork"> Work type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater than current time </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddScheduledWork``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken)">
            <summary> Add scheduled work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater than current time </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddScheduledAsyncWork``1(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken)">
            <summary> Add scheduled asynchronous work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater than current time </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddScheduledAsyncWork``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken)">
            <summary> Add scheduled asynchronous work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater than current time </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddScheduledWork``1(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.Threading.CancellationToken)">
            <summary> Add delayed work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TWork"> Work type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater than 00:00:00.000 </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddScheduledWork``2(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.Threading.CancellationToken)">
            <summary> Add delayed work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater than 00:00:00.000 </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddScheduledAsyncWork``1(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.Threading.CancellationToken)">
            <summary> Add delayed asynchronous work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater than 00:00:00.000 </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddScheduledAsyncWork``2(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.Threading.CancellationToken)">
            <summary> Add delayed asynchronous work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater than 00:00:00.000 </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddCronWork``1(AInq.Background.Services.IWorkScheduler,System.String,System.Threading.CancellationToken,System.Int32)">
            <summary> Add CRON-scheduled work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TWork"> Work type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less than -1 </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddCronWork``2(AInq.Background.Services.IWorkScheduler,System.String,System.Threading.CancellationToken,System.Int32)">
            <summary> Add CRON-scheduled work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less than -1 </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddCronAsyncWork``1(AInq.Background.Services.IWorkScheduler,System.String,System.Threading.CancellationToken,System.Int32)">
            <summary> Add CRON-scheduled asynchronous work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less than -1 </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddCronAsyncWork``2(AInq.Background.Services.IWorkScheduler,System.String,System.Threading.CancellationToken,System.Int32)">
            <summary> Add CRON-scheduled asynchronous work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less than -1 </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddRepeatedWork``1(AInq.Background.Services.IWorkScheduler,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="starTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TWork"> Work type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00.000 or <paramref name="execCount" /> is 0 or less than -1 </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddRepeatedWork``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="starTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00.000 or <paramref name="execCount" /> is 0 or less than -1 </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddRepeatedAsyncWork``1(AInq.Background.Services.IWorkScheduler,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated asynchronous work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="starTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00.000 or <paramref name="execCount" /> is 0 or less than -1 </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddRepeatedAsyncWork``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated asynchronous work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="starTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00.000 or <paramref name="execCount" /> is 0 or less than -1 </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddRepeatedWork``1(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TWork"> Work type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00.000 or <paramref name="execCount" /> is 0 or less than -1 </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddRepeatedWork``2(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00.000 or <paramref name="execCount" /> is 0 or less than -1 </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddRepeatedAsyncWork``1(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated asynchronous work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00.000 or <paramref name="execCount" /> is 0 or less than -1 </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddRepeatedAsyncWork``2(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated asynchronous work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00.000 or <paramref name="execCount" /> is 0 or less than -1 </exception>
        </member>
        <member name="T:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper">
            <summary> Helper class for <see cref="T:AInq.Background.Services.IWorkScheduler" /> </summary>
            <remarks> <see cref="T:AInq.Background.Services.IWorkScheduler" /> service should be registered on host to schedule work </remarks>
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddScheduledWork(System.IServiceProvider,AInq.Background.Tasks.IWork,System.TimeSpan,System.Threading.CancellationToken)">
            <summary> Add delayed work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater than 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDelayExtension.AddScheduledWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork,System.TimeSpan,System.Threading.CancellationToken)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddScheduledWork``1(System.IServiceProvider,AInq.Background.Tasks.IWork{``0},System.TimeSpan,System.Threading.CancellationToken)">
            <summary> Add delayed work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater than 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDelayExtension.AddScheduledWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork{``0},System.TimeSpan,System.Threading.CancellationToken)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddScheduledAsyncWork(System.IServiceProvider,AInq.Background.Tasks.IAsyncWork,System.TimeSpan,System.Threading.CancellationToken)">
            <summary> Add delayed asynchronous work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater than 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDelayExtension.AddScheduledAsyncWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork,System.TimeSpan,System.Threading.CancellationToken)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddScheduledAsyncWork``1(System.IServiceProvider,AInq.Background.Tasks.IAsyncWork{``0},System.TimeSpan,System.Threading.CancellationToken)">
            <summary> Add delayed asynchronous work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater than 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDelayExtension.AddScheduledAsyncWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork{``0},System.TimeSpan,System.Threading.CancellationToken)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddScheduledWork``1(System.IServiceProvider,System.TimeSpan,System.Threading.CancellationToken)">
            <summary> Add delayed work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TWork"> Work type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater than 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddScheduledWork``1(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.Threading.CancellationToken)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddScheduledWork``2(System.IServiceProvider,System.TimeSpan,System.Threading.CancellationToken)">
            <summary> Add delayed work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater than 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddScheduledWork``2(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.Threading.CancellationToken)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddScheduledAsyncWork``1(System.IServiceProvider,System.TimeSpan,System.Threading.CancellationToken)">
            <summary> Add delayed asynchronous work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater than 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddScheduledAsyncWork``1(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.Threading.CancellationToken)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddScheduledAsyncWork``2(System.IServiceProvider,System.TimeSpan,System.Threading.CancellationToken)">
            <summary> Add delayed work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater than 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddScheduledAsyncWork``2(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.Threading.CancellationToken)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddScheduledWork(System.IServiceProvider,AInq.Background.Tasks.IWork,System.DateTime,System.Threading.CancellationToken)">
            <summary> Add scheduled work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater than current time </exception>
            <seealso cref="M:AInq.Background.Services.IWorkScheduler.AddScheduledWork(AInq.Background.Tasks.IWork,System.DateTime,System.Threading.CancellationToken)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddScheduledWork``1(System.IServiceProvider,AInq.Background.Tasks.IWork{``0},System.DateTime,System.Threading.CancellationToken)">
            <summary> Add scheduled work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater than current time </exception>
            <seealso cref="M:AInq.Background.Services.IWorkScheduler.AddScheduledWork``1(AInq.Background.Tasks.IWork{``0},System.DateTime,System.Threading.CancellationToken)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddScheduledAsyncWork(System.IServiceProvider,AInq.Background.Tasks.IAsyncWork,System.DateTime,System.Threading.CancellationToken)">
            <summary> Add scheduled asynchronous work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater than current time </exception>
            <seealso cref="M:AInq.Background.Services.IWorkScheduler.AddScheduledAsyncWork(AInq.Background.Tasks.IAsyncWork,System.DateTime,System.Threading.CancellationToken)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddScheduledAsyncWork``1(System.IServiceProvider,AInq.Background.Tasks.IAsyncWork{``0},System.DateTime,System.Threading.CancellationToken)">
            <summary> Add scheduled asynchronous work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater than current time </exception>
            <seealso cref="M:AInq.Background.Services.IWorkScheduler.AddScheduledAsyncWork``1(AInq.Background.Tasks.IAsyncWork{``0},System.DateTime,System.Threading.CancellationToken)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddScheduledWork``1(System.IServiceProvider,System.DateTime,System.Threading.CancellationToken)">
            <summary> Add scheduled work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TWork"> Work type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater than current time </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddScheduledWork``1(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddScheduledWork``2(System.IServiceProvider,System.DateTime,System.Threading.CancellationToken)">
            <summary> Add scheduled work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater than current time </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddScheduledWork``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddScheduledAsyncWork``1(System.IServiceProvider,System.DateTime,System.Threading.CancellationToken)">
            <summary> Add scheduled asynchronous work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater than current time </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddScheduledAsyncWork``1(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddScheduledAsyncWork``2(System.IServiceProvider,System.DateTime,System.Threading.CancellationToken)">
            <summary> Add scheduled asynchronous work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater than current time </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddScheduledAsyncWork``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddCronWork(System.IServiceProvider,AInq.Background.Tasks.IWork,System.String,System.Threading.CancellationToken,System.Int32)">
            <summary> Add CRON-scheduled work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <returns> Work result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <seealso cref="M:AInq.Background.Services.IWorkScheduler.AddCronWork(AInq.Background.Tasks.IWork,System.String,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddCronWork``1(System.IServiceProvider,AInq.Background.Tasks.IWork{``0},System.String,System.Threading.CancellationToken,System.Int32)">
            <summary> Add CRON-scheduled work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <seealso cref="M:AInq.Background.Services.IWorkScheduler.AddCronWork``1(AInq.Background.Tasks.IWork{``0},System.String,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddCronAsyncWork(System.IServiceProvider,AInq.Background.Tasks.IAsyncWork,System.String,System.Threading.CancellationToken,System.Int32)">
            <summary> Add CRON-scheduled asynchronous work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <returns> Work result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <seealso cref="M:AInq.Background.Services.IWorkScheduler.AddCronAsyncWork(AInq.Background.Tasks.IAsyncWork,System.String,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddCronAsyncWork``1(System.IServiceProvider,AInq.Background.Tasks.IAsyncWork{``0},System.String,System.Threading.CancellationToken,System.Int32)">
            <summary> Add CRON-scheduled asynchronous work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <seealso cref="M:AInq.Background.Services.IWorkScheduler.AddCronAsyncWork``1(AInq.Background.Tasks.IAsyncWork{``0},System.String,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddCronWork``1(System.IServiceProvider,System.String,System.Threading.CancellationToken,System.Int32)">
            <summary> Add CRON-scheduled work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TWork"> Work type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddCronWork``1(AInq.Background.Services.IWorkScheduler,System.String,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddCronWork``2(System.IServiceProvider,System.String,System.Threading.CancellationToken,System.Int32)">
            <summary> Add CRON-scheduled work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddCronWork``2(AInq.Background.Services.IWorkScheduler,System.String,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddCronAsyncWork``1(System.IServiceProvider,System.String,System.Threading.CancellationToken,System.Int32)">
            <summary> Add CRON-scheduled asynchronous work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddCronAsyncWork``1(AInq.Background.Services.IWorkScheduler,System.String,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddCronAsyncWork``2(System.IServiceProvider,System.String,System.Threading.CancellationToken,System.Int32)">
            <summary> Add CRON-scheduled asynchronous work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddCronAsyncWork``2(AInq.Background.Services.IWorkScheduler,System.String,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddRepeatedWork(System.IServiceProvider,AInq.Background.Tasks.IWork,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="starTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Services.IWorkScheduler.AddRepeatedWork(AInq.Background.Tasks.IWork,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddRepeatedWork``1(System.IServiceProvider,AInq.Background.Tasks.IWork{``0},System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="starTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Services.IWorkScheduler.AddRepeatedWork``1(AInq.Background.Tasks.IWork{``0},System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddRepeatedAsyncWork(System.IServiceProvider,AInq.Background.Tasks.IAsyncWork,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated asynchronous work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="starTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Services.IWorkScheduler.AddRepeatedAsyncWork(AInq.Background.Tasks.IAsyncWork,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddRepeatedAsyncWork``1(System.IServiceProvider,AInq.Background.Tasks.IAsyncWork{``0},System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated asynchronous work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="starTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Services.IWorkScheduler.AddRepeatedAsyncWork``1(AInq.Background.Tasks.IAsyncWork{``0},System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddRepeatedWork``1(System.IServiceProvider,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="starTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TWork"> Work type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddRepeatedWork``1(AInq.Background.Services.IWorkScheduler,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddRepeatedWork``2(System.IServiceProvider,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="starTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddRepeatedWork``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddRepeatedAsyncWork``1(System.IServiceProvider,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated asynchronous work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="starTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddRepeatedAsyncWork``1(AInq.Background.Services.IWorkScheduler,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddRepeatedAsyncWork``2(System.IServiceProvider,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated asynchronous work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="starTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddRepeatedAsyncWork``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddRepeatedWork(System.IServiceProvider,AInq.Background.Tasks.IWork,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDelayExtension.AddRepeatedWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddRepeatedWork``1(System.IServiceProvider,AInq.Background.Tasks.IWork{``0},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDelayExtension.AddRepeatedWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork{``0},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddRepeatedAsyncWork(System.IServiceProvider,AInq.Background.Tasks.IAsyncWork,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated asynchronous work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDelayExtension.AddRepeatedAsyncWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddRepeatedAsyncWork``1(System.IServiceProvider,AInq.Background.Tasks.IAsyncWork{``0},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated asynchronous work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDelayExtension.AddRepeatedAsyncWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork{``0},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddRepeatedWork``1(System.IServiceProvider,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TWork"> Work type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddRepeatedWork``1(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddRepeatedWork``2(System.IServiceProvider,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddRepeatedWork``2(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddRepeatedAsyncWork``1(System.IServiceProvider,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated asynchronous work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddRepeatedAsyncWork``1(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddRepeatedAsyncWork``2(System.IServiceProvider,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated asynchronous work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddRepeatedAsyncWork``2(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="T:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction">
            <summary> <see cref="T:AInq.Background.Services.IWorkScheduler" /> extensions to run scheduled access in background queue </summary>
            <remarks> <see cref="T:AInq.Background.Services.IPriorityAccessQueue`1" /> or <see cref="T:AInq.Background.Services.IAccessQueue`1" /> service should be registered on host to run queued access </remarks>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledQueueAccess``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAccess{``0},System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access scheduler instance </param>
            <param name="access"> Access instance </param>
            <param name="delay"> Access execution delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater than 00:00:00 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledQueueAccess``2(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAccess{``0,``1},System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access scheduler instance </param>
            <param name="access"> Access instance </param>
            <param name="delay"> Access execution delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater than 00:00:00 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledAsyncQueueAccess``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncAccess{``0},System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued asynchronous access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access scheduler instance </param>
            <param name="access"> Access instance </param>
            <param name="delay"> Access execution delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater than 00:00:00 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledAsyncQueueAccess``2(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncAccess{``0,``1},System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued asynchronous access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access scheduler instance </param>
            <param name="access"> Access instance </param>
            <param name="delay"> Access execution delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater than 00:00:00 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledQueueAccess``2(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access scheduler instance </param>
            <param name="delay"> Access execution delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <typeparam name="TAccess"> Access type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater than 00:00:00 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledQueueAccess``3(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access scheduler instance </param>
            <param name="delay"> Access execution delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <typeparam name="TAccess"> Access type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater than 00:00:00 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledAsyncQueueAccess``2(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued asynchronous access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access scheduler instance </param>
            <param name="delay"> Access execution delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <typeparam name="TAsyncAccess"> Access type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater than 00:00:00 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledAsyncQueueAccess``3(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued asynchronous access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access scheduler instance </param>
            <param name="delay"> Access execution delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <typeparam name="TAsyncAccess"> Access type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater than 00:00:00 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledQueueAccess``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAccess{``0},System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access scheduler instance </param>
            <param name="access"> Access instance </param>
            <param name="time"> Access execution time </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater than current time </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledQueueAccess``2(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAccess{``0,``1},System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access scheduler instance </param>
            <param name="access"> Access instance </param>
            <param name="time"> Access execution time </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater than current time </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledAsyncQueueAccess``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncAccess{``0},System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled asynchronous queued access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access scheduler instance </param>
            <param name="access"> Access instance </param>
            <param name="time"> Access execution time </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater than current time </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledAsyncQueueAccess``2(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncAccess{``0,``1},System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled asynchronous queued access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access scheduler instance </param>
            <param name="access"> Access instance </param>
            <param name="time"> Access execution time </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater than current time </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledQueueAccess``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access scheduler instance </param>
            <param name="time"> Access execution time </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <typeparam name="TAccess"> Access type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater than current time </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledQueueAccess``3(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access scheduler instance </param>
            <param name="time"> Access execution time </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <typeparam name="TAccess"> Access type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater than current time </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledAsyncQueueAccess``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued asynchronous access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access scheduler instance </param>
            <param name="time"> Access execution time </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <typeparam name="TAsyncAccess"> Access type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater than current time </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledAsyncQueueAccess``3(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued asynchronous access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access scheduler instance </param>
            <param name="time"> Access execution time </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <typeparam name="TAsyncAccess"> Access type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater than current time </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddCronQueueAccess``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAccess{``0},System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access scheduler instance </param>
            <param name="access"> Access instance </param>
            <param name="cronExpression"> Access CRON-based execution schedule </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access result observable </returns>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddCronQueueAccess``2(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAccess{``0,``1},System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access scheduler instance </param>
            <param name="access"> Access instance </param>
            <param name="cronExpression"> Access CRON-based execution schedule </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <returns> Access result observable </returns>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddCronAsyncQueueAccess``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncAccess{``0},System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued asynchronous access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access scheduler instance </param>
            <param name="access"> Access instance </param>
            <param name="cronExpression"> Access CRON-based execution schedule </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access result observable </returns>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddCronAsyncQueueAccess``2(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncAccess{``0,``1},System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued asynchronous access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access scheduler instance </param>
            <param name="access"> Access instance </param>
            <param name="cronExpression"> Access CRON-based execution schedule </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <returns> Access result observable </returns>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddCronQueueAccess``2(AInq.Background.Services.IWorkScheduler,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access scheduler instance </param>
            <param name="cronExpression"> Access CRON-based execution schedule </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <typeparam name="TAccess"> Access type </typeparam>
            <returns> Access result observable </returns>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddCronQueueAccess``3(AInq.Background.Services.IWorkScheduler,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access scheduler instance </param>
            <param name="cronExpression"> Access CRON-based execution schedule </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <typeparam name="TAccess"> Access type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <returns> Access result observable </returns>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddCronAsyncQueueAccess``2(AInq.Background.Services.IWorkScheduler,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued asynchronous access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access scheduler instance </param>
            <param name="cronExpression"> Access CRON-based execution schedule </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <typeparam name="TAsyncAccess"> Access type </typeparam>
            <returns> Access result observable </returns>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddCronAsyncQueueAccess``3(AInq.Background.Services.IWorkScheduler,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued asynchronous access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access scheduler instance </param>
            <param name="cronExpression"> Access CRON-based execution schedule </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <typeparam name="TAsyncAccess"> Access type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <returns> Access result observable </returns>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedQueueAccess``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAccess{``0},System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access Scheduler instance </param>
            <param name="access"> Access instance </param>
            <param name="starTime"> Access first execution time </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedQueueAccess``2(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAccess{``0,``1},System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access Scheduler instance </param>
            <param name="access"> Access instance </param>
            <param name="starTime"> Access first execution time </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedAsyncQueueAccess``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncAccess{``0},System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access Scheduler instance </param>
            <param name="access"> Access instance </param>
            <param name="starTime"> Access first execution time </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedAsyncQueueAccess``2(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncAccess{``0,``1},System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access Scheduler instance </param>
            <param name="access"> Access instance </param>
            <param name="starTime"> Access first execution time </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedQueueAccess``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access Scheduler instance </param>
            <param name="starTime"> Access first execution time </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <typeparam name="TAccess"> Access type </typeparam>
            <returns> Access result observable </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedQueueAccess``3(AInq.Background.Services.IWorkScheduler,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access Scheduler instance </param>
            <param name="starTime"> Access first execution time </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <typeparam name="TAccess"> Access type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <returns> Access result observable </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedAsyncQueueAccess``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access Scheduler instance </param>
            <param name="starTime"> Access first execution time </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <typeparam name="TAsyncAccess"> Access type </typeparam>
            <returns> Access result observable </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedAsyncQueueAccess``3(AInq.Background.Services.IWorkScheduler,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access Scheduler instance </param>
            <param name="starTime"> Access first execution time </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <typeparam name="TAsyncAccess"> Access type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <returns> Access result observable </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedQueueAccess``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAccess{``0},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access Scheduler instance </param>
            <param name="access"> Access instance </param>
            <param name="startDelay"> Access first execution delay </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedQueueAccess``2(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAccess{``0,``1},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access Scheduler instance </param>
            <param name="access"> Access instance </param>
            <param name="startDelay"> Access first execution delay </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedAsyncQueueAccess``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncAccess{``0},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access Scheduler instance </param>
            <param name="access"> Access instance </param>
            <param name="startDelay"> Access first execution delay </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedAsyncQueueAccess``2(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncAccess{``0,``1},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access Scheduler instance </param>
            <param name="access"> Access instance </param>
            <param name="startDelay"> Access first execution delay </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedQueueAccess``2(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access Scheduler instance </param>
            <param name="startDelay"> Access first execution delay </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <typeparam name="TAccess"> Access type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedQueueAccess``3(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access Scheduler instance </param>
            <param name="startDelay"> Access first execution delay </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <typeparam name="TAccess"> Access type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedAsyncQueueAccess``2(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access Scheduler instance </param>
            <param name="startDelay"> Access first execution delay </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <typeparam name="TAsyncAccess"> Access type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedAsyncQueueAccess``3(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access Scheduler instance </param>
            <param name="startDelay"> Access first execution delay </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <typeparam name="TAsyncAccess"> Access type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00 </exception>
        </member>
        <member name="T:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction">
            <summary> <see cref="T:AInq.Background.Services.IWorkScheduler" /> extensions to run scheduled access in registered background queue </summary>
            <remarks> <see cref="T:AInq.Background.Services.IWorkScheduler" /> service should be registered on host to schedule work </remarks>
            <remarks> <see cref="T:AInq.Background.Services.IPriorityAccessQueue`1" /> or <see cref="T:AInq.Background.Services.IAccessQueue`1" /> service should be registered on host to run queued access </remarks>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddScheduledQueueAccess``1(System.IServiceProvider,AInq.Background.Tasks.IAccess{``0},System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="access"> Access instance </param>
            <param name="delay"> Access execution delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater than 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledQueueAccess``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAccess{``0},System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddScheduledQueueAccess``2(System.IServiceProvider,AInq.Background.Tasks.IAccess{``0,``1},System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="access"> Access instance </param>
            <param name="delay"> Access execution delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TResult"> Access result type </typeparam>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater than 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledQueueAccess``2(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAccess{``0,``1},System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddScheduledAsyncQueueAccess``1(System.IServiceProvider,AInq.Background.Tasks.IAsyncAccess{``0},System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued asynchronous access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="access"> Access instance </param>
            <param name="delay"> Access execution delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater than 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledAsyncQueueAccess``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncAccess{``0},System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddScheduledAsyncQueueAccess``2(System.IServiceProvider,AInq.Background.Tasks.IAsyncAccess{``0,``1},System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued asynchronous access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="access"> Access instance </param>
            <param name="delay"> Access execution delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TResult"> Access result type </typeparam>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater than 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledAsyncQueueAccess``2(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncAccess{``0,``1},System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddScheduledQueueAccess``2(System.IServiceProvider,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="delay"> Access execution delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TAccess"> Access type </typeparam>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater than 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledQueueAccess``2(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddScheduledQueueAccess``3(System.IServiceProvider,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="delay"> Access execution delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TAccess"> Access type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater than 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledQueueAccess``3(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddScheduledAsyncQueueAccess``2(System.IServiceProvider,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued asynchronous access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="delay"> Access execution delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TAsyncAccess"> Access type </typeparam>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater than 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledAsyncQueueAccess``2(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddScheduledAsyncQueueAccess``3(System.IServiceProvider,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued asynchronous access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="delay"> Access execution delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TAsyncAccess"> Access type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater than 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledAsyncQueueAccess``3(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddScheduledQueueAccess``1(System.IServiceProvider,AInq.Background.Tasks.IAccess{``0},System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="access"> Access instance </param>
            <param name="time"> Access execution time </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater than current time </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledQueueAccess``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAccess{``0},System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddScheduledQueueAccess``2(System.IServiceProvider,AInq.Background.Tasks.IAccess{``0,``1},System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="access"> Access instance </param>
            <param name="time"> Access execution time </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TResult"> Access result type </typeparam>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater than current time </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledQueueAccess``2(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAccess{``0,``1},System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddScheduledAsyncQueueAccess``1(System.IServiceProvider,AInq.Background.Tasks.IAsyncAccess{``0},System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued asynchronous access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="access"> Access instance </param>
            <param name="time"> Access execution time </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater than current time </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledAsyncQueueAccess``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncAccess{``0},System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddScheduledAsyncQueueAccess``2(System.IServiceProvider,AInq.Background.Tasks.IAsyncAccess{``0,``1},System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued asynchronous access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="access"> Access instance </param>
            <param name="time"> Access execution time </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TResult"> Access result type </typeparam>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater than current time </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledAsyncQueueAccess``2(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncAccess{``0,``1},System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddScheduledQueueAccess``2(System.IServiceProvider,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="time"> Access execution time </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TAccess"> Access type </typeparam>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater than current time </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledQueueAccess``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddScheduledQueueAccess``3(System.IServiceProvider,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="time"> Access execution time </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TAccess"> Access type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater than current time </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledQueueAccess``3(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddScheduledAsyncQueueAccess``2(System.IServiceProvider,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued asynchronous access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="time"> Access execution time </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TAsyncAccess"> Access type </typeparam>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater than current time </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledAsyncQueueAccess``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddScheduledAsyncQueueAccess``3(System.IServiceProvider,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued asynchronous access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="time"> Access execution time </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TAsyncAccess"> Access type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater than current time </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledAsyncQueueAccess``3(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddCronQueueAccess``1(System.IServiceProvider,AInq.Background.Tasks.IAccess{``0},System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="access"> Access instance </param>
            <param name="cronExpression"> Access CRON-based execution schedule </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access scheduler is registered </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddCronQueueAccess``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAccess{``0},System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddCronQueueAccess``2(System.IServiceProvider,AInq.Background.Tasks.IAccess{``0,``1},System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="access"> Access instance </param>
            <param name="cronExpression"> Access CRON-based execution schedule </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Access result type </typeparam>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access scheduler is registered </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddCronQueueAccess``2(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAccess{``0,``1},System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddCronAsyncQueueAccess``1(System.IServiceProvider,AInq.Background.Tasks.IAsyncAccess{``0},System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued asynchronous access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="access"> Access instance </param>
            <param name="cronExpression"> Access CRON-based execution schedule </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access scheduler is registered </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddCronAsyncQueueAccess``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncAccess{``0},System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddCronAsyncQueueAccess``2(System.IServiceProvider,AInq.Background.Tasks.IAsyncAccess{``0,``1},System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued asynchronous access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="access"> Access instance </param>
            <param name="cronExpression"> Access CRON-based execution schedule </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Access result type </typeparam>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access scheduler is registered </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddCronAsyncQueueAccess``2(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncAccess{``0,``1},System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddCronQueueAccess``2(System.IServiceProvider,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="cronExpression"> Access CRON-based execution schedule </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TAccess"> Access type </typeparam>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access scheduler is registered </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddCronQueueAccess``2(AInq.Background.Services.IWorkScheduler,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddCronQueueAccess``3(System.IServiceProvider,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="cronExpression"> Access CRON-based execution schedule </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TAccess"> Access type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access scheduler is registered </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddCronQueueAccess``3(AInq.Background.Services.IWorkScheduler,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddCronAsyncQueueAccess``2(System.IServiceProvider,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued asynchronous access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="cronExpression"> Access CRON-based execution schedule </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncAccess"> Access type </typeparam>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access scheduler is registered </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddCronAsyncQueueAccess``2(AInq.Background.Services.IWorkScheduler,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddCronAsyncQueueAccess``3(System.IServiceProvider,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued asynchronous access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="cronExpression"> Access CRON-based execution schedule </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncAccess"> Access type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access scheduler is registered </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddCronAsyncQueueAccess``3(AInq.Background.Services.IWorkScheduler,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddRepeatedQueueAccess``1(System.IServiceProvider,AInq.Background.Tasks.IAccess{``0},System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="access"> Access instance </param>
            <param name="starTime"> Access first execution time </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedQueueAccess``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAccess{``0},System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddRepeatedQueueAccess``2(System.IServiceProvider,AInq.Background.Tasks.IAccess{``0,``1},System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="access"> Access instance </param>
            <param name="starTime"> Access first execution time </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Access result type </typeparam>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedQueueAccess``2(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAccess{``0,``1},System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddRepeatedAsyncQueueAccess``1(System.IServiceProvider,AInq.Background.Tasks.IAsyncAccess{``0},System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="access"> Access instance </param>
            <param name="starTime"> Access first execution time </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedAsyncQueueAccess``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncAccess{``0},System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddRepeatedAsyncQueueAccess``2(System.IServiceProvider,AInq.Background.Tasks.IAsyncAccess{``0,``1},System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="access"> Access instance </param>
            <param name="starTime"> Access first execution time </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Access result type </typeparam>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedAsyncQueueAccess``2(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncAccess{``0,``1},System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddRepeatedQueueAccess``2(System.IServiceProvider,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="starTime"> Access first execution time </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TAccess"> Access type </typeparam>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedQueueAccess``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddRepeatedQueueAccess``3(System.IServiceProvider,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="starTime"> Access first execution time </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TAccess"> Access type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedQueueAccess``3(AInq.Background.Services.IWorkScheduler,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddRepeatedAsyncQueueAccess``2(System.IServiceProvider,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="starTime"> Access first execution time </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncAccess"> Access type </typeparam>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedAsyncQueueAccess``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddRepeatedAsyncQueueAccess``3(System.IServiceProvider,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="starTime"> Access first execution time </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncAccess"> Access type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedAsyncQueueAccess``3(AInq.Background.Services.IWorkScheduler,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddRepeatedQueueAccess``1(System.IServiceProvider,AInq.Background.Tasks.IAccess{``0},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="access"> Access instance </param>
            <param name="startDelay"> Access first execution delay </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedQueueAccess``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAccess{``0},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddRepeatedQueueAccess``2(System.IServiceProvider,AInq.Background.Tasks.IAccess{``0,``1},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="access"> Access instance </param>
            <param name="startDelay"> Access first execution delay </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Access result type </typeparam>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedQueueAccess``2(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAccess{``0,``1},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddRepeatedAsyncQueueAccess``1(System.IServiceProvider,AInq.Background.Tasks.IAsyncAccess{``0},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="access"> Access instance </param>
            <param name="startDelay"> Access first execution delay </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedAsyncQueueAccess``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncAccess{``0},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddRepeatedAsyncQueueAccess``2(System.IServiceProvider,AInq.Background.Tasks.IAsyncAccess{``0,``1},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="access"> Access instance </param>
            <param name="startDelay"> Access first execution delay </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Access result type </typeparam>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedAsyncQueueAccess``2(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncAccess{``0,``1},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddRepeatedQueueAccess``2(System.IServiceProvider,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="startDelay"> Access first execution delay </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TAccess"> Access type </typeparam>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedQueueAccess``2(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddRepeatedQueueAccess``3(System.IServiceProvider,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="startDelay"> Access first execution delay </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TAccess"> Access type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedQueueAccess``3(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddRepeatedAsyncQueueAccess``2(System.IServiceProvider,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="startDelay"> Access first execution delay </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncAccess"> Access type </typeparam>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedAsyncQueueAccess``2(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddRepeatedAsyncQueueAccess``3(System.IServiceProvider,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="startDelay"> Access first execution delay </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncAccess"> Access type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedAsyncQueueAccess``3(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="T:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction">
            <summary> <see cref="T:AInq.Background.Services.IWorkScheduler" /> extensions to run scheduled work in background queue </summary>
            <remarks> <see cref="T:AInq.Background.Services.IPriorityWorkQueue" /> or <see cref="T:AInq.Background.Services.IWorkQueue" /> service should be registered on host to run queued work </remarks>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledQueueWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater than 00:00:00.000 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledQueueWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork{``0},System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater than 00:00:00.000 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledAsyncQueueWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued asynchronous work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater than 00:00:00.000 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledAsyncQueueWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork{``0},System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued asynchronous work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater than 00:00:00.000 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledQueueWork``1(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work scheduler instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TWork"> Work type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater than 00:00:00.000 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledQueueWork``2(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work scheduler instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater than 00:00:00.000 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledAsyncQueueWork``1(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued asynchronous work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work scheduler instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater than 00:00:00.000 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledAsyncQueueWork``2(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued asynchronous work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work scheduler instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater than 00:00:00.000 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledQueueWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater than current time </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledQueueWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork{``0},System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater than current time </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledAsyncQueueWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled asynchronous queued work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater than current time </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledAsyncQueueWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork{``0},System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled asynchronous queued work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater than current time </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledQueueWork``1(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work scheduler instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TWork"> Work type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater than current time </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledQueueWork``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work scheduler instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater than current time </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledAsyncQueueWork``1(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued asynchronous work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work scheduler instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater than current time </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledAsyncQueueWork``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued asynchronous work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work scheduler instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater than current time </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddCronQueueWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less than -1 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddCronQueueWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork{``0},System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less than -1 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddCronAsyncQueueWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued asynchronous work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less than -1 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddCronAsyncQueueWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork{``0},System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued asynchronous work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less than -1 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddCronQueueWork``1(AInq.Background.Services.IWorkScheduler,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work scheduler instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TWork"> Work type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less than -1 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddCronQueueWork``2(AInq.Background.Services.IWorkScheduler,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work scheduler instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less than -1 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddCronAsyncQueueWork``1(AInq.Background.Services.IWorkScheduler,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued asynchronous work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work scheduler instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less than -1 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddCronAsyncQueueWork``2(AInq.Background.Services.IWorkScheduler,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued asynchronous work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work scheduler instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less than -1 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedQueueWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="starTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00.000 or <paramref name="execCount" /> is 0 or less than -1 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedQueueWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork{``0},System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="starTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00.000 or <paramref name="execCount" /> is 0 or less than -1 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedAsyncQueueWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="starTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00.000 or <paramref name="execCount" /> is 0 or less than -1 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedAsyncQueueWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork{``0},System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="starTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00.000 or <paramref name="execCount" /> is 0 or less than -1 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedQueueWork``1(AInq.Background.Services.IWorkScheduler,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="starTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TWork"> Work type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00.000 or <paramref name="execCount" /> is 0 or less than -1 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedQueueWork``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="starTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00.000 or <paramref name="execCount" /> is 0 or less than -1 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedAsyncQueueWork``1(AInq.Background.Services.IWorkScheduler,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="starTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00.000 or <paramref name="execCount" /> is 0 or less than -1 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedAsyncQueueWork``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="starTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00.000 or <paramref name="execCount" /> is 0 or less than -1 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedQueueWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00.000 or <paramref name="execCount" /> is 0 or less than -1 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedQueueWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork{``0},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00.000 or <paramref name="execCount" /> is 0 or less than -1 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedAsyncQueueWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00.000 or <paramref name="execCount" /> is 0 or less than -1 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedAsyncQueueWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork{``0},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00.000 or <paramref name="execCount" /> is 0 or less than -1 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedQueueWork``1(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TWork"> Work type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00.000 or <paramref name="execCount" /> is 0 or less than -1 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedQueueWork``2(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00.000 or <paramref name="execCount" /> is 0 or less than -1 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedAsyncQueueWork``1(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00.000 or <paramref name="execCount" /> is 0 or less than -1 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedAsyncQueueWork``2(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00.000 or <paramref name="execCount" /> is 0 or less than -1 </exception>
        </member>
        <member name="T:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction">
            <summary> <see cref="T:AInq.Background.Services.IWorkScheduler" /> extensions to run scheduled work in registered background queue </summary>
            <remarks> <see cref="T:AInq.Background.Services.IWorkScheduler" /> service should be registered on host to schedule work </remarks>
            <remarks> <see cref="T:AInq.Background.Services.IPriorityWorkQueue" /> or <see cref="T:AInq.Background.Services.IWorkQueue" /> service should be registered on host to run queued work </remarks>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddScheduledQueueWork(System.IServiceProvider,AInq.Background.Tasks.IWork,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater than 00:00:00.000 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledQueueWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddScheduledQueueWork``1(System.IServiceProvider,AInq.Background.Tasks.IWork{``0},System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater than 00:00:00.000 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledQueueWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork{``0},System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddScheduledAsyncQueueWork(System.IServiceProvider,AInq.Background.Tasks.IAsyncWork,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued asynchronous work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater than 00:00:00.000 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledAsyncQueueWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddScheduledAsyncQueueWork``1(System.IServiceProvider,AInq.Background.Tasks.IAsyncWork{``0},System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued asynchronous work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater than 00:00:00.000 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledAsyncQueueWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork{``0},System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddScheduledQueueWork``1(System.IServiceProvider,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TWork"> Work type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater than 00:00:00.000 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledQueueWork``1(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddScheduledQueueWork``2(System.IServiceProvider,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater than 00:00:00.000 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledQueueWork``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddScheduledAsyncQueueWork``1(System.IServiceProvider,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued asynchronous work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater than 00:00:00.000 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledAsyncQueueWork``1(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddScheduledAsyncQueueWork``2(System.IServiceProvider,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued asynchronous work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater than 00:00:00.000 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledAsyncQueueWork``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddScheduledQueueWork(System.IServiceProvider,AInq.Background.Tasks.IWork,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater than current time </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledQueueWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddScheduledQueueWork``1(System.IServiceProvider,AInq.Background.Tasks.IWork{``0},System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater than current time </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledQueueWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork{``0},System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddScheduledAsyncQueueWork(System.IServiceProvider,AInq.Background.Tasks.IAsyncWork,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued asynchronous work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater than current time </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledAsyncQueueWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddScheduledAsyncQueueWork``1(System.IServiceProvider,AInq.Background.Tasks.IAsyncWork{``0},System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued asynchronous work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater than current time </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledAsyncQueueWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork{``0},System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddScheduledQueueWork``1(System.IServiceProvider,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TWork"> Work type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater than current time </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledQueueWork``1(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddScheduledQueueWork``2(System.IServiceProvider,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater than current time </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledQueueWork``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddScheduledAsyncQueueWork``1(System.IServiceProvider,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued asynchronous work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater than current time </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledAsyncQueueWork``1(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddScheduledAsyncQueueWork``2(System.IServiceProvider,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued asynchronous work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater than current time </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledAsyncQueueWork``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddCronQueueWork(System.IServiceProvider,AInq.Background.Tasks.IWork,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <returns> Work result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less than -1 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddCronQueueWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddCronQueueWork``1(System.IServiceProvider,AInq.Background.Tasks.IWork{``0},System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less than -1 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddCronQueueWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork{``0},System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddCronAsyncQueueWork(System.IServiceProvider,AInq.Background.Tasks.IAsyncWork,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued asynchronous work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <returns> Work result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less than -1 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddCronAsyncQueueWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddCronAsyncQueueWork``1(System.IServiceProvider,AInq.Background.Tasks.IAsyncWork{``0},System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued asynchronous work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less than -1 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddCronAsyncQueueWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork{``0},System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddCronQueueWork``1(System.IServiceProvider,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TWork"> Work type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less than -1 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddCronQueueWork``1(AInq.Background.Services.IWorkScheduler,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddCronQueueWork``2(System.IServiceProvider,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less than -1 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddCronQueueWork``2(AInq.Background.Services.IWorkScheduler,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddCronAsyncQueueWork``1(System.IServiceProvider,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued asynchronous work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less than -1 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddCronAsyncQueueWork``1(AInq.Background.Services.IWorkScheduler,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddCronAsyncQueueWork``2(System.IServiceProvider,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued asynchronous work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less than -1 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddCronAsyncQueueWork``2(AInq.Background.Services.IWorkScheduler,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddRepeatedQueueWork(System.IServiceProvider,AInq.Background.Tasks.IWork,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="starTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00.000 or <paramref name="execCount" /> is 0 or less than -1 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedQueueWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddRepeatedQueueWork``1(System.IServiceProvider,AInq.Background.Tasks.IWork{``0},System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="starTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00.000 or <paramref name="execCount" /> is 0 or less than -1 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedQueueWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork{``0},System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddRepeatedAsyncQueueWork(System.IServiceProvider,AInq.Background.Tasks.IAsyncWork,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="starTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00.000 or <paramref name="execCount" /> is 0 or less than -1 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedAsyncQueueWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddRepeatedAsyncQueueWork``1(System.IServiceProvider,AInq.Background.Tasks.IAsyncWork{``0},System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="starTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00.000 or <paramref name="execCount" /> is 0 or less than -1 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedAsyncQueueWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork{``0},System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddRepeatedQueueWork``1(System.IServiceProvider,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="starTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TWork"> Work type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00.000 or <paramref name="execCount" /> is 0 or less than -1 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedQueueWork``1(AInq.Background.Services.IWorkScheduler,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddRepeatedQueueWork``2(System.IServiceProvider,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="starTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00.000 or <paramref name="execCount" /> is 0 or less than -1 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedQueueWork``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddRepeatedAsyncQueueWork``1(System.IServiceProvider,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="starTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00.000 or <paramref name="execCount" /> is 0 or less than -1 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedAsyncQueueWork``1(AInq.Background.Services.IWorkScheduler,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddRepeatedAsyncQueueWork``2(System.IServiceProvider,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="starTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00.000 or <paramref name="execCount" /> is 0 or less than -1 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedAsyncQueueWork``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddRepeatedQueueWork(System.IServiceProvider,AInq.Background.Tasks.IWork,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00.000 or <paramref name="execCount" /> is 0 or less than -1 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedQueueWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddRepeatedQueueWork``1(System.IServiceProvider,AInq.Background.Tasks.IWork{``0},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00.000 or <paramref name="execCount" /> is 0 or less than -1 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedQueueWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork{``0},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddRepeatedAsyncQueueWork(System.IServiceProvider,AInq.Background.Tasks.IAsyncWork,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00.000 or <paramref name="execCount" /> is 0 or less than -1 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedAsyncQueueWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddRepeatedAsyncQueueWork``1(System.IServiceProvider,AInq.Background.Tasks.IAsyncWork{``0},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00.000 or <paramref name="execCount" /> is 0 or less than -1 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedAsyncQueueWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork{``0},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddRepeatedQueueWork``1(System.IServiceProvider,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TWork"> Work type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00.000 or <paramref name="execCount" /> is 0 or less than -1 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedQueueWork``1(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddRepeatedQueueWork``2(System.IServiceProvider,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00.000 or <paramref name="execCount" /> is 0 or less than -1 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedQueueWork``2(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddRepeatedAsyncQueueWork``1(System.IServiceProvider,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00.000 or <paramref name="execCount" /> is 0 or less than -1 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedAsyncQueueWork``1(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddRepeatedAsyncQueueWork``2(System.IServiceProvider,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00.000 or <paramref name="execCount" /> is 0 or less than -1 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedAsyncQueueWork``2(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="T:AInq.Background.Services.IWorkScheduler">
            <summary> Interface for work scheduler service </summary>
        </member>
        <member name="M:AInq.Background.Services.IWorkScheduler.AddScheduledWork(AInq.Background.Tasks.IWork,System.DateTime,System.Threading.CancellationToken)">
            <summary> Add scheduled work to scheduler </summary>
            <param name="work"> Work instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater than current time </exception>
        </member>
        <member name="M:AInq.Background.Services.IWorkScheduler.AddScheduledWork``1(AInq.Background.Tasks.IWork{``0},System.DateTime,System.Threading.CancellationToken)">
            <summary> Add scheduled work to scheduler </summary>
            <param name="work"> Work instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater than current time </exception>
        </member>
        <member name="M:AInq.Background.Services.IWorkScheduler.AddScheduledAsyncWork(AInq.Background.Tasks.IAsyncWork,System.DateTime,System.Threading.CancellationToken)">
            <summary> Add scheduled asynchronous work to scheduler </summary>
            <param name="work"> Work instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater than current time </exception>
        </member>
        <member name="M:AInq.Background.Services.IWorkScheduler.AddScheduledAsyncWork``1(AInq.Background.Tasks.IAsyncWork{``0},System.DateTime,System.Threading.CancellationToken)">
            <summary> Add scheduled asynchronous work to scheduler </summary>
            <param name="work"> Work instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater than current time </exception>
        </member>
        <member name="M:AInq.Background.Services.IWorkScheduler.AddCronWork(AInq.Background.Tasks.IWork,System.String,System.Threading.CancellationToken,System.Int32)">
            <summary> Add CRON-scheduled work to scheduler </summary>
            <param name="work"> Work instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="cronExpression" /> is NULL </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less than -1 </exception>
        </member>
        <member name="M:AInq.Background.Services.IWorkScheduler.AddCronWork``1(AInq.Background.Tasks.IWork{``0},System.String,System.Threading.CancellationToken,System.Int32)">
            <summary> Add CRON-scheduled work to scheduler </summary>
            <param name="work"> Work instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="cronExpression" /> is NULL </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less than -1 </exception>
        </member>
        <member name="M:AInq.Background.Services.IWorkScheduler.AddCronAsyncWork(AInq.Background.Tasks.IAsyncWork,System.String,System.Threading.CancellationToken,System.Int32)">
            <summary> Add CRON-scheduled asynchronous work to scheduler </summary>
            <param name="work"> Work instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="cronExpression" /> is NULL </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less than -1 </exception>
        </member>
        <member name="M:AInq.Background.Services.IWorkScheduler.AddCronAsyncWork``1(AInq.Background.Tasks.IAsyncWork{``0},System.String,System.Threading.CancellationToken,System.Int32)">
            <summary> Add CRON-scheduled asynchronous work to scheduler </summary>
            <param name="work"> Work instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="cronExpression" /> is NULL </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less than -1 </exception>
        </member>
        <member name="M:AInq.Background.Services.IWorkScheduler.AddRepeatedWork(AInq.Background.Tasks.IWork,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated work to scheduler </summary>
            <param name="work"> Work instance </param>
            <param name="starTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00.000 or <paramref name="execCount" /> is 0 or less than -1 </exception>
        </member>
        <member name="M:AInq.Background.Services.IWorkScheduler.AddRepeatedWork``1(AInq.Background.Tasks.IWork{``0},System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated work to scheduler </summary>
            <param name="work"> Work instance </param>
            <param name="starTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00.000 or <paramref name="execCount" /> is 0 or less than -1 </exception>
        </member>
        <member name="M:AInq.Background.Services.IWorkScheduler.AddRepeatedAsyncWork(AInq.Background.Tasks.IAsyncWork,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated asynchronous work to scheduler </summary>
            <param name="work"> Work instance </param>
            <param name="startTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00.000 or <paramref name="execCount" /> is 0 or less than -1 </exception>
        </member>
        <member name="M:AInq.Background.Services.IWorkScheduler.AddRepeatedAsyncWork``1(AInq.Background.Tasks.IAsyncWork{``0},System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated asynchronous work to scheduler </summary>
            <param name="work"> Work instance </param>
            <param name="startTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater than 00:00:00.000 or <paramref name="execCount" /> is 0 or less than -1 </exception>
        </member>
    </members>
</doc>
