<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AInq.Background.Abstraction</name>
    </assembly>
    <members>
        <member name="M:AInq.Background.Extensions.AccessQueueDependencyInjectionExtension.EnqueueAccess``2(AInq.Background.Services.IAccessQueue{``0},System.Threading.CancellationToken,System.Int32)">
            <summary> Enqueue access action </summary>
            <param name="queue"> Access queue instance </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <typeparam name="TAccess"> Access action type </typeparam>
            <returns> Access action completion task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="queue" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.Extensions.AccessQueueDependencyInjectionExtension.EnqueueAccess``3(AInq.Background.Services.IAccessQueue{``0},System.Threading.CancellationToken,System.Int32)">
            <summary> Enqueue access action </summary>
            <param name="queue"> Access queue instance </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <typeparam name="TAccess"> Access action type </typeparam>
            <typeparam name="TResult"> Access action result type </typeparam>
            <returns> Access action result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="queue" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.Extensions.AccessQueueDependencyInjectionExtension.EnqueueAsyncAccess``2(AInq.Background.Services.IAccessQueue{``0},System.Threading.CancellationToken,System.Int32)">
            <summary> Enqueue asynchronous access action </summary>
            <param name="queue"> Access queue instance </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <typeparam name="TAsyncAccess"> Access action type </typeparam>
            <returns> Access action completion task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="queue" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.Extensions.AccessQueueDependencyInjectionExtension.EnqueueAsyncAccess``3(AInq.Background.Services.IAccessQueue{``0},System.Threading.CancellationToken,System.Int32)">
            <summary> Enqueue asynchronous access action </summary>
            <param name="queue"> Access queue instance </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <typeparam name="TAsyncAccess"> Access action type </typeparam>
            <typeparam name="TResult"> Access action result type </typeparam>
            <returns> Access action result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="queue" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.Extensions.AccessQueueDependencyInjectionExtension.EnqueueAccess``2(AInq.Background.Services.IPriorityAccessQueue{``0},System.Int32,System.Threading.CancellationToken,System.Int32)">
            <summary> Enqueue access action </summary>
            <param name="queue"> Access queue instance </param>
            <param name="priority"> Access action priority </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <typeparam name="TAccess"> Access action type </typeparam>
            <returns> Access action completion task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="queue" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.Extensions.AccessQueueDependencyInjectionExtension.EnqueueAccess``3(AInq.Background.Services.IPriorityAccessQueue{``0},System.Int32,System.Threading.CancellationToken,System.Int32)">
            <summary> Enqueue access action </summary>
            <param name="queue"> Access queue instance </param>
            <param name="priority"> Access action priority </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <typeparam name="TAccess"> Access action type </typeparam>
            <typeparam name="TResult"> Access action result type </typeparam>
            <returns> Access action result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="queue" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.Extensions.AccessQueueDependencyInjectionExtension.EnqueueAsyncAccess``2(AInq.Background.Services.IPriorityAccessQueue{``0},System.Int32,System.Threading.CancellationToken,System.Int32)">
            <summary> Enqueue asynchronous access action </summary>
            <param name="queue"> Access queue instance </param>
            <param name="priority"> Access action priority </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <typeparam name="TAsyncAccess"> Access action type </typeparam>
            <returns> Access action completion task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="queue" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.Extensions.AccessQueueDependencyInjectionExtension.EnqueueAsyncAccess``3(AInq.Background.Services.IPriorityAccessQueue{``0},System.Int32,System.Threading.CancellationToken,System.Int32)">
            <summary> Enqueue asynchronous access action </summary>
            <param name="queue"> Access queue instance </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="priority"> Access action priority </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <typeparam name="TAsyncAccess"> Access action type </typeparam>
            <typeparam name="TResult"> Access action result type </typeparam>
            <returns> Access action result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="queue" /> is NULL </exception>
        </member>
        <member name="T:AInq.Background.Extensions.WorkQueueDependencyInjectionExtension">
            <summary> <see cref="T:AInq.Background.Services.IWorkQueue" /> and <see cref="T:AInq.Background.Services.IPriorityWorkQueue" /> extensions to enqueue work from DI </summary>
        </member>
        <member name="M:AInq.Background.Extensions.WorkQueueDependencyInjectionExtension.EnqueueWork``1(AInq.Background.Services.IWorkQueue,System.Threading.CancellationToken,System.Int32)">
            <summary> Enqueue background work </summary>
            <param name="queue"> Work queue instance </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <typeparam name="TWork"> Work type </typeparam>
            <returns> Work completion task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="queue" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkQueueDependencyInjectionExtension.EnqueueWork``2(AInq.Background.Services.IWorkQueue,System.Threading.CancellationToken,System.Int32)">
            <summary> Enqueue background work </summary>
            <param name="queue"> Work queue instance </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <typeparam name="TWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="queue" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkQueueDependencyInjectionExtension.EnqueueAsyncWork``1(AInq.Background.Services.IWorkQueue,System.Threading.CancellationToken,System.Int32)">
            <summary> Enqueue asynchronous background work </summary>
            <param name="queue"> Work queue instance </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <returns> Work completion task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="queue" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkQueueDependencyInjectionExtension.EnqueueAsyncWork``2(AInq.Background.Services.IWorkQueue,System.Threading.CancellationToken,System.Int32)">
            <summary> Enqueue asynchronous background work </summary>
            <param name="queue"> Work queue instance </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="queue" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkQueueDependencyInjectionExtension.EnqueueWork``1(AInq.Background.Services.IPriorityWorkQueue,System.Int32,System.Threading.CancellationToken,System.Int32)">
            <summary> Enqueue background work with given <paramref name="priority" /> </summary>
            <param name="queue"> Work queue instance </param>
            <param name="priority"> Work priority </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <typeparam name="TWork"> Work type </typeparam>
            <returns> Work completion task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="queue" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkQueueDependencyInjectionExtension.EnqueueWork``2(AInq.Background.Services.IPriorityWorkQueue,System.Int32,System.Threading.CancellationToken,System.Int32)">
            <summary> Enqueue background work with given <paramref name="priority" /> </summary>
            <param name="queue"> Work queue instance </param>
            <param name="priority"> Work priority </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <typeparam name="TWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="queue" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkQueueDependencyInjectionExtension.EnqueueAsyncWork``1(AInq.Background.Services.IPriorityWorkQueue,System.Int32,System.Threading.CancellationToken,System.Int32)">
            <summary> Enqueue asynchronous background work with given <paramref name="priority" /> </summary>
            <param name="queue"> Work queue instance </param>
            <param name="priority"> Work priority </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <returns> Work completion task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="queue" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkQueueDependencyInjectionExtension.EnqueueAsyncWork``2(AInq.Background.Services.IPriorityWorkQueue,System.Int32,System.Threading.CancellationToken,System.Int32)">
            <summary> Enqueue asynchronous background work with given <paramref name="priority" /> </summary>
            <param name="queue"> Work queue instance </param>
            <param name="priority"> Work priority </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work completion task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="queue" /> is NULL </exception>
        </member>
        <member name="T:AInq.Background.Extensions.WorkSchedulerDelayExtension">
            <summary> <see cref="T:AInq.Background.Services.IWorkScheduler" /> extensions to schedule work with delayed start </summary>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDelayExtension.AddScheduledWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork,System.TimeSpan,System.Threading.CancellationToken)">
            <summary> Add delayed work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater then 00:00:00.000 </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDelayExtension.AddScheduledWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork{``0},System.TimeSpan,System.Threading.CancellationToken)">
            <summary> Add delayed work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater then 00:00:00.000 </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDelayExtension.AddScheduledAsyncWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork,System.TimeSpan,System.Threading.CancellationToken)">
            <summary> Add delayed asynchronous work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater then 00:00:00.000 </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDelayExtension.AddScheduledAsyncWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork{``0},System.TimeSpan,System.Threading.CancellationToken)">
            <summary> Add delayed asynchronous work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater then 00:00:00.000 </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDelayExtension.AddRepeatedWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or <paramref name="execCount" /> is 0 or less then -1 </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDelayExtension.AddRepeatedWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork{``0},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or <paramref name="execCount" /> is 0 or less then -1 </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDelayExtension.AddRepeatedAsyncWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated asynchronous work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or <paramref name="execCount" /> is 0 or less then -1 </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDelayExtension.AddRepeatedAsyncWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork{``0},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated asynchronous work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or <paramref name="execCount" /> is 0 or less then -1 </exception>
        </member>
        <member name="T:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension">
            <summary> <see cref="T:AInq.Background.Services.IWorkScheduler" /> extensions to schedule work from DI </summary>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddScheduledWork``1(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken)">
            <summary> Add scheduled work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TWork"> Work type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater then current time </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddScheduledWork``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken)">
            <summary> Add scheduled work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater then current time </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddScheduledAsyncWork``1(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken)">
            <summary> Add scheduled asynchronous work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater then current time </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddScheduledAsyncWork``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken)">
            <summary> Add scheduled asynchronous work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater then current time </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddScheduledWork``1(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.Threading.CancellationToken)">
            <summary> Add delayed work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TWork"> Work type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater then 00:00:00.000 </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddScheduledWork``2(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.Threading.CancellationToken)">
            <summary> Add delayed work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater then 00:00:00.000 </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddScheduledAsyncWork``1(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.Threading.CancellationToken)">
            <summary> Add delayed asynchronous work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater then 00:00:00.000 </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddScheduledAsyncWork``2(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.Threading.CancellationToken)">
            <summary> Add delayed asynchronous work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater then 00:00:00.000 </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddCronWork``1(AInq.Background.Services.IWorkScheduler,System.String,System.Threading.CancellationToken,System.Int32)">
            <summary> Add CRON-scheduled work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TWork"> Work type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="cronExpression" /> <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less then -1 </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddCronWork``2(AInq.Background.Services.IWorkScheduler,System.String,System.Threading.CancellationToken,System.Int32)">
            <summary> Add CRON-scheduled work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="cronExpression" /> <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less then -1 </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddCronAsyncWork``1(AInq.Background.Services.IWorkScheduler,System.String,System.Threading.CancellationToken,System.Int32)">
            <summary> Add CRON-scheduled asynchronous work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="cronExpression" /> <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less then -1 </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddCronAsyncWork``2(AInq.Background.Services.IWorkScheduler,System.String,System.Threading.CancellationToken,System.Int32)">
            <summary> Add CRON-scheduled asynchronous work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="cronExpression" /> or <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less then -1 </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddRepeatedWork``1(AInq.Background.Services.IWorkScheduler,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="starTime"> Work first execution time</param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TWork"> Work type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or <paramref name="execCount" /> is 0 or less then -1 </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddRepeatedWork``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="starTime"> Work first execution time</param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or <paramref name="execCount" /> is 0 or less then -1 </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddRepeatedAsyncWork``1(AInq.Background.Services.IWorkScheduler,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated asynchronous work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="starTime"> Work first execution time</param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or <paramref name="execCount" /> is 0 or less then -1 </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddRepeatedAsyncWork``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated asynchronous work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="starTime"> Work first execution time</param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or <paramref name="execCount" /> is 0 or less then -1 </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddRepeatedWork``1(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TWork"> Work type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or <paramref name="execCount" /> is 0 or less then -1 </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddRepeatedWork``2(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or <paramref name="execCount" /> is 0 or less then -1 </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddRepeatedAsyncWork``1(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated asynchronous work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or <paramref name="execCount" /> is 0 or less then -1 </exception>
        </member>
        <member name="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddRepeatedAsyncWork``2(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated asynchronous work to scheduler </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or <paramref name="execCount" /> is 0 or less then -1 </exception>
        </member>
        <member name="T:AInq.Background.Helpers.AccessQueueServiceProviderHelper">
            <summary> Helper class for <see cref="T:AInq.Background.Services.IAccessQueue`1" /> and <see cref="T:AInq.Background.Services.IPriorityAccessQueue`1" /> </summary>
            <remarks>
                <see cref="T:AInq.Background.Services.IAccessQueue`1" /> or <see cref="T:AInq.Background.Services.IPriorityAccessQueue`1" /> service should be registered on host to run queued
                access action
            </remarks>
        </member>
        <member name="M:AInq.Background.Helpers.AccessQueueServiceProviderHelper.EnqueueAccess``1(System.IServiceProvider,AInq.Background.Tasks.IAccess{``0},System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Enqueue access action into registered access queue with giver <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="access"> Access action instance </param>
            <param name="cancellation"> Access action cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access action priority </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access action completion task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access queue for <typeparamref name="TResource" /> is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> or <paramref name="provider" /> is NULL </exception>
            <seealso cref="M:AInq.Background.Services.IPriorityAccessQueue`1.EnqueueAccess(AInq.Background.Tasks.IAccess{`0},System.Int32,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.AccessQueueServiceProviderHelper.EnqueueAccess``2(System.IServiceProvider,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Enqueue access action into registered access queue with giver <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="cancellation"> Access action cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access action priority </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <typeparam name="TAccess"> Access action type </typeparam>
            <returns> Access action completion task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access queue for <typeparamref name="TResource" /> is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <seealso cref="M:AInq.Background.Extensions.AccessQueueDependencyInjectionExtension.EnqueueAccess``2(AInq.Background.Services.IPriorityAccessQueue{``0},System.Int32,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.AccessQueueServiceProviderHelper.EnqueueAccess``2(System.IServiceProvider,AInq.Background.Tasks.IAccess{``0,``1},System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Enqueue access action into registered access queue with giver <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="access"> Access action instance </param>
            <param name="cancellation"> Access action cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access action priority </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <typeparam name="TResult"> Access action result type </typeparam>
            <returns> Access action result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access queue for <typeparamref name="TResource" /> is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> or <paramref name="provider" /> is NULL </exception>
            <seealso cref="M:AInq.Background.Services.IPriorityAccessQueue`1.EnqueueAccess``1(AInq.Background.Tasks.IAccess{`0,``0},System.Int32,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.AccessQueueServiceProviderHelper.EnqueueAccess``3(System.IServiceProvider,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Enqueue access action into registered access queue with giver <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="cancellation"> Access action cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access action priority </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <typeparam name="TAccess"> Access action type </typeparam>
            <typeparam name="TResult"> Access action result type </typeparam>
            <returns> Access action result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access queue for <typeparamref name="TResource" /> is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <seealso
                cref="M:AInq.Background.Extensions.AccessQueueDependencyInjectionExtension.EnqueueAccess``3(AInq.Background.Services.IPriorityAccessQueue{``0},System.Int32,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.AccessQueueServiceProviderHelper.EnqueueAsyncAccess``1(System.IServiceProvider,AInq.Background.Tasks.IAsyncAccess{``0},System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Enqueue asynchronous access action into registered access queue with giver <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="access"> Access action instance </param>
            <param name="cancellation"> Access action cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access action priority </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> Access action completion task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access queue for <typeparamref name="TResource" /> is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> or <paramref name="provider" /> is NULL </exception>
            <seealso cref="M:AInq.Background.Services.IPriorityAccessQueue`1.EnqueueAsyncAccess(AInq.Background.Tasks.IAsyncAccess{`0},System.Int32,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.AccessQueueServiceProviderHelper.EnqueueAsyncAccess``2(System.IServiceProvider,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Enqueue asynchronous access action into registered access queue with giver <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="cancellation"> Access action cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access action priority </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <typeparam name="TAsyncAccess"> Access action type </typeparam>
            <returns> Access action completion task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access queue for <typeparamref name="TResource" /> is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <seealso
                cref="M:AInq.Background.Extensions.AccessQueueDependencyInjectionExtension.EnqueueAsyncAccess``2(AInq.Background.Services.IPriorityAccessQueue{``0},System.Int32,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.AccessQueueServiceProviderHelper.EnqueueAsyncAccess``2(System.IServiceProvider,AInq.Background.Tasks.IAsyncAccess{``0,``1},System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Enqueue asynchronous access action into registered access queue with giver <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="access"> Access action instance </param>
            <param name="cancellation"> Access action cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access action priority </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <typeparam name="TResult"> Access action result type </typeparam>
            <returns> Access action result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access queue for <typeparamref name="TResource" /> is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> or <paramref name="provider" /> is NULL </exception>
            <seealso cref="M:AInq.Background.Services.IPriorityAccessQueue`1.EnqueueAsyncAccess``1(AInq.Background.Tasks.IAsyncAccess{`0,``0},System.Int32,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.AccessQueueServiceProviderHelper.EnqueueAsyncAccess``3(System.IServiceProvider,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Enqueue asynchronous access action into registered access queue with giver <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="cancellation"> Access action cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access action priority </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <typeparam name="TAsyncAccess"> Access action type </typeparam>
            <typeparam name="TResult"> Access action result type </typeparam>
            <returns> Access action result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access queue for <typeparamref name="TResource" /> is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <seealso
                cref="M:AInq.Background.Extensions.AccessQueueDependencyInjectionExtension.EnqueueAsyncAccess``3(AInq.Background.Services.IPriorityAccessQueue{``0},System.Int32,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="T:AInq.Background.Helpers.ConveyorChain`3">
            <summary> Chain of two conveyors </summary>
            <typeparam name="TData"> Input data type </typeparam>
            <typeparam name="TIntermediate"> Intermediate result type </typeparam>
            <typeparam name="TResult"> Processing result type </typeparam>
        </member>
        <member name="M:AInq.Background.Helpers.ConveyorChain`3.#ctor(AInq.Background.Services.IConveyor{`0,`1},AInq.Background.Services.IConveyor{`1,`2})">
            <param name="first"> First conveyor </param>
            <param name="second"> Second conveyor </param>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="first" /> or <paramref name="second" /> is NULL </exception>
        </member>
        <member name="T:AInq.Background.Helpers.ConveyorChain`4">
            <summary> Chain of three conveyors </summary>
            <typeparam name="TData"> Input data type </typeparam>
            <typeparam name="TFirstIntermediate"> Intermediate result type </typeparam>
            <typeparam name="TSecondIntermediate"> Intermediate result type </typeparam>
            <typeparam name="TResult"> Processing result type </typeparam>
        </member>
        <member name="M:AInq.Background.Helpers.ConveyorChain`4.#ctor(AInq.Background.Services.IConveyor{`0,`1},AInq.Background.Services.IConveyor{`1,`2},AInq.Background.Services.IConveyor{`2,`3})">
            <param name="first"> First conveyor </param>
            <param name="second"> Second conveyor </param>
            <param name="third"> Third conveyor </param>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="first" />, <paramref name="second" /> or <paramref name="third" /> is NULL </exception>
        </member>
        <member name="T:AInq.Background.Helpers.ConveyorServiceProviderHelper">
            <summary> Helper class for <see cref="T:AInq.Background.Services.IConveyor`2" /> and <see cref="T:AInq.Background.Services.IPriorityConveyor`2" /> </summary>
            <remarks> <see cref="T:AInq.Background.Services.IConveyor`2" /> or <see cref="T:AInq.Background.Services.IPriorityConveyor`2" /> should be registered on host </remarks>
        </member>
        <member name="M:AInq.Background.Helpers.ConveyorServiceProviderHelper.ProcessDataAsync``2(System.IServiceProvider,``0,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Process data using registered conveyor with giver <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="data"> Data to process </param>
            <param name="cancellation"> Processing cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Operation priority </param>
            <typeparam name="TData"> Input data type </typeparam>
            <typeparam name="TResult"> Processing result type </typeparam>
            <returns> Processing result task </returns>
            <exception cref="T:System.InvalidOperationException">
                Thrown if no conveyor for given <typeparamref name="TData" /> and <typeparamref name="TResult" /> is registered
            </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="data" /> or <paramref name="provider" /> is NULL </exception>
            <seealso cref="M:AInq.Background.Services.IPriorityConveyor`2.ProcessDataAsync(`0,System.Int32,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="T:AInq.Background.Helpers.PriorityConveyorChain`3">
            <summary> Chain of two priority conveyors </summary>
            <typeparam name="TData"> Input data type </typeparam>
            <typeparam name="TIntermediate"> Intermediate result type </typeparam>
            <typeparam name="TResult"> Processing result type </typeparam>
        </member>
        <member name="M:AInq.Background.Helpers.PriorityConveyorChain`3.#ctor(AInq.Background.Services.IPriorityConveyor{`0,`1},AInq.Background.Services.IPriorityConveyor{`1,`2})">
            <param name="first"> First conveyor </param>
            <param name="second"> Second conveyor </param>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="first" /> or <paramref name="second" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.Helpers.PriorityConveyorChain`3.#ctor(AInq.Background.Services.IConveyor{`0,`1},AInq.Background.Services.IPriorityConveyor{`1,`2})">
            <param name="first"> First conveyor </param>
            <param name="second"> Second conveyor </param>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="first" /> or <paramref name="second" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.Helpers.PriorityConveyorChain`3.#ctor(AInq.Background.Services.IPriorityConveyor{`0,`1},AInq.Background.Services.IConveyor{`1,`2})">
            <param name="first"> First conveyor </param>
            <param name="second"> Second conveyor </param>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="first" /> or <paramref name="second" /> is NULL </exception>
        </member>
        <member name="T:AInq.Background.Helpers.PriorityConveyorChain`4">
            <summary> Chain of three priority conveyors </summary>
            <typeparam name="TData"> Input data type </typeparam>
            <typeparam name="TFirstIntermediate"> Intermediate result type </typeparam>
            <typeparam name="TSecondIntermediate"> Intermediate result type </typeparam>
            <typeparam name="TResult"> Processing result type </typeparam>
        </member>
        <member name="M:AInq.Background.Helpers.PriorityConveyorChain`4.#ctor(AInq.Background.Services.IPriorityConveyor{`0,`1},AInq.Background.Services.IPriorityConveyor{`1,`2},AInq.Background.Services.IPriorityConveyor{`2,`3})">
            <param name="first"> First conveyor </param>
            <param name="second"> Second conveyor </param>
            <param name="third"> Third conveyor </param>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="first" />, <paramref name="second" /> or <paramref name="third" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.Helpers.PriorityConveyorChain`4.#ctor(AInq.Background.Services.IConveyor{`0,`1},AInq.Background.Services.IPriorityConveyor{`1,`2},AInq.Background.Services.IPriorityConveyor{`2,`3})">
            <param name="first"> First conveyor </param>
            <param name="second"> Second conveyor </param>
            <param name="third"> Third conveyor </param>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="first" />, <paramref name="second" /> or <paramref name="third" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.Helpers.PriorityConveyorChain`4.#ctor(AInq.Background.Services.IPriorityConveyor{`0,`1},AInq.Background.Services.IConveyor{`1,`2},AInq.Background.Services.IPriorityConveyor{`2,`3})">
            <param name="first"> First conveyor </param>
            <param name="second"> Second conveyor </param>
            <param name="third"> Third conveyor </param>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="first" />, <paramref name="second" /> or <paramref name="third" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.Helpers.PriorityConveyorChain`4.#ctor(AInq.Background.Services.IPriorityConveyor{`0,`1},AInq.Background.Services.IPriorityConveyor{`1,`2},AInq.Background.Services.IConveyor{`2,`3})">
            <param name="first"> First conveyor </param>
            <param name="second"> Second conveyor </param>
            <param name="third"> Third conveyor </param>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="first" />, <paramref name="second" /> or <paramref name="third" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.Helpers.PriorityConveyorChain`4.#ctor(AInq.Background.Services.IConveyor{`0,`1},AInq.Background.Services.IConveyor{`1,`2},AInq.Background.Services.IPriorityConveyor{`2,`3})">
            <param name="first"> First conveyor </param>
            <param name="second"> Second conveyor </param>
            <param name="third"> Third conveyor </param>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="first" />, <paramref name="second" /> or <paramref name="third" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.Helpers.PriorityConveyorChain`4.#ctor(AInq.Background.Services.IConveyor{`0,`1},AInq.Background.Services.IPriorityConveyor{`1,`2},AInq.Background.Services.IConveyor{`2,`3})">
            <param name="first"> First conveyor </param>
            <param name="second"> Second conveyor </param>
            <param name="third"> Third conveyor </param>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="first" />, <paramref name="second" /> or <paramref name="third" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.Helpers.PriorityConveyorChain`4.#ctor(AInq.Background.Services.IPriorityConveyor{`0,`1},AInq.Background.Services.IConveyor{`1,`2},AInq.Background.Services.IConveyor{`2,`3})">
            <param name="first"> First conveyor </param>
            <param name="second"> Second conveyor </param>
            <param name="third"> Third conveyor </param>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="first" />, <paramref name="second" /> or <paramref name="third" /> is NULL </exception>
        </member>
        <member name="T:AInq.Background.Helpers.PriorityConveyorEmulator`2">
            <summary> Wrapper around <see cref="T:AInq.Background.Services.IConveyor`2" /> to emulate <see cref="T:AInq.Background.Services.IPriorityConveyor`2" /> </summary>
            <typeparam name="TData"> Input data type </typeparam>
            <typeparam name="TResult"> Processing result type </typeparam>
        </member>
        <member name="M:AInq.Background.Helpers.PriorityConveyorEmulator`2.#ctor(AInq.Background.Services.IConveyor{`0,`1})">
            <param name="conveyor"> Conveyor instance </param>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="conveyor" /> is NULL </exception>
        </member>
        <member name="T:AInq.Background.Helpers.WorkQueueServiceProviderHelper">
            <summary> Helper class for <see cref="T:AInq.Background.Services.IWorkQueue" /> and <see cref="T:AInq.Background.Services.IPriorityWorkQueue" /> </summary>
            <remarks> <see cref="T:AInq.Background.Services.IPriorityWorkQueue" /> or <see cref="T:AInq.Background.Services.IWorkQueue" /> service should be registered on host to run queued work </remarks>
        </member>
        <member name="M:AInq.Background.Helpers.WorkQueueServiceProviderHelper.EnqueueWork(System.IServiceProvider,AInq.Background.Tasks.IWork,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Enqueue background work into registered queue with giver <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <returns> Work completion task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work queue is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="provider" /> is NULL </exception>
            <seealso cref="M:AInq.Background.Services.IPriorityWorkQueue.EnqueueWork(AInq.Background.Tasks.IWork,System.Int32,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkQueueServiceProviderHelper.EnqueueWork``1(System.IServiceProvider,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Enqueue background work into registered queue with giver <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TWork"> Work type </typeparam>
            <returns> Work completion task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work queue is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkQueueDependencyInjectionExtension.EnqueueWork``1(AInq.Background.Services.IPriorityWorkQueue,System.Int32,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkQueueServiceProviderHelper.EnqueueWork``1(System.IServiceProvider,AInq.Background.Tasks.IWork{``0},System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Enqueue background work into registered queue with giver <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work completion task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work queue is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="provider" /> is NULL </exception>
            <seealso cref="M:AInq.Background.Services.IPriorityWorkQueue.EnqueueWork``1(AInq.Background.Tasks.IWork{``0},System.Int32,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkQueueServiceProviderHelper.EnqueueWork``2(System.IServiceProvider,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Enqueue background work into registered queue with giver <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work completion task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work queue is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkQueueDependencyInjectionExtension.EnqueueWork``2(AInq.Background.Services.IPriorityWorkQueue,System.Int32,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkQueueServiceProviderHelper.EnqueueAsyncWork(System.IServiceProvider,AInq.Background.Tasks.IAsyncWork,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Enqueue asynchronous background work into registered queue with giver <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <returns> Work completion task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work queue is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="provider" /> is NULL </exception>
            <seealso cref="M:AInq.Background.Services.IPriorityWorkQueue.EnqueueAsyncWork(AInq.Background.Tasks.IAsyncWork,System.Int32,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkQueueServiceProviderHelper.EnqueueAsyncWork``1(System.IServiceProvider,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Enqueue asynchronous background work into registered queue with giver <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <returns> Work completion task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work queue is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkQueueDependencyInjectionExtension.EnqueueAsyncWork``1(AInq.Background.Services.IPriorityWorkQueue,System.Int32,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkQueueServiceProviderHelper.EnqueueAsyncWork``1(System.IServiceProvider,AInq.Background.Tasks.IAsyncWork{``0},System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Enqueue asynchronous background work into registered queue with giver <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work completion task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work queue is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="provider" /> is NULL </exception>
            <seealso cref="M:AInq.Background.Services.IPriorityWorkQueue.EnqueueAsyncWork``1(AInq.Background.Tasks.IAsyncWork{``0},System.Int32,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkQueueServiceProviderHelper.EnqueueAsyncWork``2(System.IServiceProvider,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Enqueue asynchronous background work into registered queue with giver <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work completion task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work queue is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkQueueDependencyInjectionExtension.EnqueueWork``2(AInq.Background.Services.IPriorityWorkQueue,System.Int32,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="T:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper">
            <summary> Helper class for <see cref="T:AInq.Background.Services.IWorkScheduler" /> </summary>
            <remarks> <see cref="T:AInq.Background.Services.IWorkScheduler" /> service should be registered on host to schedule work </remarks>
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddScheduledWork(System.IServiceProvider,AInq.Background.Tasks.IWork,System.TimeSpan,System.Threading.CancellationToken)">
            <summary> Add delayed work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater then 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDelayExtension.AddScheduledWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork,System.TimeSpan,System.Threading.CancellationToken)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddScheduledWork``1(System.IServiceProvider,AInq.Background.Tasks.IWork{``0},System.TimeSpan,System.Threading.CancellationToken)">
            <summary> Add delayed work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater then 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDelayExtension.AddScheduledWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork{``0},System.TimeSpan,System.Threading.CancellationToken)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddScheduledAsyncWork(System.IServiceProvider,AInq.Background.Tasks.IAsyncWork,System.TimeSpan,System.Threading.CancellationToken)">
            <summary> Add delayed asynchronous work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater then 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDelayExtension.AddScheduledAsyncWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork,System.TimeSpan,System.Threading.CancellationToken)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddScheduledAsyncWork``1(System.IServiceProvider,AInq.Background.Tasks.IAsyncWork{``0},System.TimeSpan,System.Threading.CancellationToken)">
            <summary> Add delayed asynchronous work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater then 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDelayExtension.AddScheduledAsyncWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork{``0},System.TimeSpan,System.Threading.CancellationToken)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddScheduledWork``1(System.IServiceProvider,System.TimeSpan,System.Threading.CancellationToken)">
            <summary> Add delayed work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TWork"> Work type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater then 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddScheduledWork``1(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.Threading.CancellationToken)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddScheduledWork``2(System.IServiceProvider,System.TimeSpan,System.Threading.CancellationToken)">
            <summary> Add delayed work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater then 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddScheduledWork``2(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.Threading.CancellationToken)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddScheduledAsyncWork``1(System.IServiceProvider,System.TimeSpan,System.Threading.CancellationToken)">
            <summary> Add delayed asynchronous work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater then 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddScheduledAsyncWork``1(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.Threading.CancellationToken)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddScheduledAsyncWork``2(System.IServiceProvider,System.TimeSpan,System.Threading.CancellationToken)">
            <summary> Add delayed work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater then 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddScheduledAsyncWork``2(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.Threading.CancellationToken)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddScheduledWork(System.IServiceProvider,AInq.Background.Tasks.IWork,System.DateTime,System.Threading.CancellationToken)">
            <summary> Add scheduled work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater then current time </exception>
            <seealso cref="M:AInq.Background.Services.IWorkScheduler.AddScheduledWork(AInq.Background.Tasks.IWork,System.DateTime,System.Threading.CancellationToken)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddScheduledWork``1(System.IServiceProvider,AInq.Background.Tasks.IWork{``0},System.DateTime,System.Threading.CancellationToken)">
            <summary> Add scheduled work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater then current time </exception>
            <seealso cref="M:AInq.Background.Services.IWorkScheduler.AddScheduledWork``1(AInq.Background.Tasks.IWork{``0},System.DateTime,System.Threading.CancellationToken)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddScheduledAsyncWork(System.IServiceProvider,AInq.Background.Tasks.IAsyncWork,System.DateTime,System.Threading.CancellationToken)">
            <summary> Add scheduled asynchronous work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater then current time </exception>
            <seealso cref="M:AInq.Background.Services.IWorkScheduler.AddScheduledAsyncWork(AInq.Background.Tasks.IAsyncWork,System.DateTime,System.Threading.CancellationToken)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddScheduledAsyncWork``1(System.IServiceProvider,AInq.Background.Tasks.IAsyncWork{``0},System.DateTime,System.Threading.CancellationToken)">
            <summary> Add scheduled asynchronous work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater then current time </exception>
            <seealso cref="M:AInq.Background.Services.IWorkScheduler.AddScheduledAsyncWork``1(AInq.Background.Tasks.IAsyncWork{``0},System.DateTime,System.Threading.CancellationToken)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddScheduledWork``1(System.IServiceProvider,System.DateTime,System.Threading.CancellationToken)">
            <summary> Add scheduled work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TWork"> Work type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater then current time </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddScheduledWork``1(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddScheduledWork``2(System.IServiceProvider,System.DateTime,System.Threading.CancellationToken)">
            <summary> Add scheduled work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater then current time </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddScheduledWork``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddScheduledAsyncWork``1(System.IServiceProvider,System.DateTime,System.Threading.CancellationToken)">
            <summary> Add scheduled asynchronous work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater then current time </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddScheduledAsyncWork``1(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddScheduledAsyncWork``2(System.IServiceProvider,System.DateTime,System.Threading.CancellationToken)">
            <summary> Add scheduled asynchronous work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater then current time </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddScheduledAsyncWork``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddCronWork(System.IServiceProvider,AInq.Background.Tasks.IWork,System.String,System.Threading.CancellationToken,System.Int32)">
            <summary> Add CRON-scheduled work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <returns> Work result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="work" /> or <paramref name="cronExpression" /> or <paramref name="provider" /> is
                NULL
            </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <seealso cref="M:AInq.Background.Services.IWorkScheduler.AddCronWork(AInq.Background.Tasks.IWork,System.String,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddCronWork``1(System.IServiceProvider,AInq.Background.Tasks.IWork{``0},System.String,System.Threading.CancellationToken,System.Int32)">
            <summary> Add CRON-scheduled work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="work" /> or <paramref name="cronExpression" /> or <paramref name="provider" /> is
                NULL
            </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <seealso cref="M:AInq.Background.Services.IWorkScheduler.AddCronWork``1(AInq.Background.Tasks.IWork{``0},System.String,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddCronAsyncWork(System.IServiceProvider,AInq.Background.Tasks.IAsyncWork,System.String,System.Threading.CancellationToken,System.Int32)">
            <summary> Add CRON-scheduled asynchronous work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <returns> Work result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="work" /> or <paramref name="cronExpression" /> or <paramref name="provider" /> is
                NULL
            </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <seealso cref="M:AInq.Background.Services.IWorkScheduler.AddCronAsyncWork(AInq.Background.Tasks.IAsyncWork,System.String,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddCronAsyncWork``1(System.IServiceProvider,AInq.Background.Tasks.IAsyncWork{``0},System.String,System.Threading.CancellationToken,System.Int32)">
            <summary> Add CRON-scheduled asynchronous work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="work" /> or <paramref name="cronExpression" /> or <paramref name="provider" /> is
                NULL
            </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <seealso cref="M:AInq.Background.Services.IWorkScheduler.AddCronAsyncWork``1(AInq.Background.Tasks.IAsyncWork{``0},System.String,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddCronWork``1(System.IServiceProvider,System.String,System.Threading.CancellationToken,System.Int32)">
            <summary> Add CRON-scheduled work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TWork"> Work type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="cronExpression" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddCronWork``1(AInq.Background.Services.IWorkScheduler,System.String,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddCronWork``2(System.IServiceProvider,System.String,System.Threading.CancellationToken,System.Int32)">
            <summary> Add CRON-scheduled work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="cronExpression" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddCronWork``2(AInq.Background.Services.IWorkScheduler,System.String,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddCronAsyncWork``1(System.IServiceProvider,System.String,System.Threading.CancellationToken,System.Int32)">
            <summary> Add CRON-scheduled asynchronous work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="cronExpression" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddCronAsyncWork``1(AInq.Background.Services.IWorkScheduler,System.String,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddCronAsyncWork``2(System.IServiceProvider,System.String,System.Threading.CancellationToken,System.Int32)">
            <summary> Add CRON-scheduled asynchronous work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="cronExpression" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddCronAsyncWork``2(AInq.Background.Services.IWorkScheduler,System.String,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddRepeatedWork(System.IServiceProvider,AInq.Background.Tasks.IWork,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="starTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Services.IWorkScheduler.AddRepeatedWork(AInq.Background.Tasks.IWork,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddRepeatedWork``1(System.IServiceProvider,AInq.Background.Tasks.IWork{``0},System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="starTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Services.IWorkScheduler.AddRepeatedWork``1(AInq.Background.Tasks.IWork{``0},System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddRepeatedAsyncWork(System.IServiceProvider,AInq.Background.Tasks.IAsyncWork,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated asynchronous work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="starTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Services.IWorkScheduler.AddRepeatedAsyncWork(AInq.Background.Tasks.IAsyncWork,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddRepeatedAsyncWork``1(System.IServiceProvider,AInq.Background.Tasks.IAsyncWork{``0},System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated asynchronous work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="starTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Services.IWorkScheduler.AddRepeatedAsyncWork``1(AInq.Background.Tasks.IAsyncWork{``0},System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddRepeatedWork``1(System.IServiceProvider,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="starTime"> Work first execution time</param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TWork"> Work type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddRepeatedWork``1(AInq.Background.Services.IWorkScheduler,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddRepeatedWork``2(System.IServiceProvider,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="starTime"> Work first execution time</param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddRepeatedWork``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddRepeatedAsyncWork``1(System.IServiceProvider,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated asynchronous work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="starTime"> Work first execution time</param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddRepeatedAsyncWork``1(AInq.Background.Services.IWorkScheduler,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddRepeatedAsyncWork``2(System.IServiceProvider,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated asynchronous work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="starTime"> Work first execution time</param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00 </exception>
            <seealso
                cref="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddRepeatedAsyncWork``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddRepeatedWork(System.IServiceProvider,AInq.Background.Tasks.IWork,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDelayExtension.AddRepeatedWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddRepeatedWork``1(System.IServiceProvider,AInq.Background.Tasks.IWork{``0},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDelayExtension.AddRepeatedWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork{``0},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddRepeatedAsyncWork(System.IServiceProvider,AInq.Background.Tasks.IAsyncWork,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated asynchronous work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDelayExtension.AddRepeatedAsyncWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddRepeatedAsyncWork``1(System.IServiceProvider,AInq.Background.Tasks.IAsyncWork{``0},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated asynchronous work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDelayExtension.AddRepeatedAsyncWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork{``0},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddRepeatedWork``1(System.IServiceProvider,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TWork"> Work type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddRepeatedWork``1(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddRepeatedWork``2(System.IServiceProvider,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddRepeatedWork``2(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddRepeatedAsyncWork``1(System.IServiceProvider,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated asynchronous work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddRepeatedAsyncWork``1(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Helpers.WorkSchedulerServiceProviderHelper.AddRepeatedAsyncWork``2(System.IServiceProvider,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated asynchronous work to registered scheduler </summary>
            <param name="provider"> Service provider instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00 </exception>
            <seealso
                cref="M:AInq.Background.Extensions.WorkSchedulerDependencyInjectionExtension.AddRepeatedAsyncWork``2(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32)" />
        </member>
        <member name="T:AInq.Background.Interaction.WorkQueueAccessQueueInteraction">
            <summary> <see cref="T:AInq.Background.Services.IWorkQueue" /> and <see cref="T:AInq.Background.Services.IPriorityWorkQueue" /> extensions to run access in background queue  </summary>
            <remarks>
                <see cref="T:AInq.Background.Services.IPriorityAccessQueue`1" /> or <see cref="T:AInq.Background.Services.IAccessQueue`1" /> service should be registered on host to run queued
                access
            </remarks>
        </member>
        <member name="M:AInq.Background.Interaction.WorkQueueAccessQueueInteraction.EnqueueAccess``1(AInq.Background.Services.IWorkQueue,AInq.Background.Tasks.IAccess{``0},System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Enqueue access action into work queue with given <paramref name="priority" /> (if supported) </summary>
            <param name="queue"> Work queue instance </param>
            <param name="access"> Access action instance </param>
            <param name="priority"> Access action priority </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access action completion task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> or <paramref name="queue" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkQueueAccessQueueInteraction.EnqueueAccess``2(AInq.Background.Services.IWorkQueue,AInq.Background.Tasks.IAccess{``0,``1},System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Enqueue access action into work queue with given <paramref name="priority" /> (if supported) </summary>
            <param name="queue"> Work queue instance </param>
            <param name="access"> Access action instance </param>
            <param name="priority"> Access action priority </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <typeparam name="TResult"> Access action result type </typeparam>
            <returns> Access action completion task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> or <paramref name="queue" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkQueueAccessQueueInteraction.EnqueueAsyncAccess``1(AInq.Background.Services.IWorkQueue,AInq.Background.Tasks.IAsyncAccess{``0},System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Enqueue asynchronous access action into work queue with given <paramref name="priority" /> (if supported) </summary>
            <param name="queue"> Work queue instance </param>
            <param name="access"> Access action instance </param>
            <param name="priority"> Access action priority </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access action completion task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> or <paramref name="queue" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkQueueAccessQueueInteraction.EnqueueAsyncAccess``2(AInq.Background.Services.IWorkQueue,AInq.Background.Tasks.IAsyncAccess{``0,``1},System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Enqueue asynchronous access action into work queue with given <paramref name="priority" /> (if supported) </summary>
            <param name="queue"> Work queue instance </param>
            <param name="access"> Access action instance </param>
            <param name="priority"> Access action priority </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <typeparam name="TResult"> Access action result type </typeparam>
            <returns> Access action completion task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> or <paramref name="queue" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkQueueAccessQueueInteraction.EnqueueAccess``2(AInq.Background.Services.IWorkQueue,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Enqueue access action into work queue with given <paramref name="priority" /> (if supported) </summary>
            <param name="queue"> Work queue instance </param>
            <param name="priority"> Access action priority </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <typeparam name="TAccess"> Access action type </typeparam>
            <returns> Access action completion task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if or <paramref name="queue" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkQueueAccessQueueInteraction.EnqueueAccess``3(AInq.Background.Services.IWorkQueue,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Enqueue access action into work queue with given <paramref name="priority" /> (if supported) </summary>
            <param name="queue"> Work queue instance </param>
            <param name="priority"> Access action priority </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <typeparam name="TAccess"> Access action type </typeparam>
            <typeparam name="TResult"> Access action result type </typeparam>
            <returns> Access action completion task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if or <paramref name="queue" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkQueueAccessQueueInteraction.EnqueueAsyncAccess``2(AInq.Background.Services.IWorkQueue,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Enqueue asynchronous access action into work queue with given <paramref name="priority" /> (if supported) </summary>
            <param name="queue"> Work queue instance </param>
            <param name="priority"> Access action priority </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <typeparam name="TAsyncAccess"> Access action type </typeparam>
            <returns> Access action completion task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="queue" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkQueueAccessQueueInteraction.EnqueueAsyncAccess``3(AInq.Background.Services.IWorkQueue,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Enqueue asynchronous access action into work queue with given <paramref name="priority" /> (if supported) </summary>
            <param name="queue"> Work queue instance </param>
            <param name="priority"> Access action priority </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <typeparam name="TAsyncAccess"> Access action type </typeparam>
            <typeparam name="TResult"> Access action result type </typeparam>
            <returns> Access action completion task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="queue" /> is NULL </exception>
        </member>
        <member name="T:AInq.Background.Interaction.WorkQueueAccessQueueServiceProviderInteraction">
            <summary> <see cref="T:AInq.Background.Services.IWorkScheduler" /> extensions to run scheduled access in registered background queue  </summary>
            <remarks> <see cref="T:AInq.Background.Services.IPriorityWorkQueue" /> or <see cref="T:AInq.Background.Services.IWorkQueue" /> service should be registered on host to run queued work </remarks>
            <remarks>
                <see cref="T:AInq.Background.Services.IPriorityAccessQueue`1" /> or <see cref="T:AInq.Background.Services.IAccessQueue`1" /> service should be registered on host to run queued
                access
            </remarks>
        </member>
        <member name="M:AInq.Background.Interaction.WorkQueueAccessQueueServiceProviderInteraction.EnqueueAccess``1(System.IServiceProvider,AInq.Background.Tasks.IAccess{``0},System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Enqueue access action into registered work queue with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="access"> Access action instance </param>
            <param name="priority"> Access action priority </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access action completion task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> or <paramref name="provider" /> is NULL </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkQueueAccessQueueInteraction.EnqueueAccess``1(AInq.Background.Services.IWorkQueue,AInq.Background.Tasks.IAccess{``0},System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkQueueAccessQueueServiceProviderInteraction.EnqueueAccess``2(System.IServiceProvider,AInq.Background.Tasks.IAccess{``0,``1},System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Enqueue access action into registered work queue with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="access"> Access action instance </param>
            <param name="priority"> Access action priority </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <typeparam name="TResult"> Access action result type </typeparam>
            <returns> Access action completion task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> or <paramref name="provider" /> is NULL </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkQueueAccessQueueInteraction.EnqueueAccess``2(AInq.Background.Services.IWorkQueue,AInq.Background.Tasks.IAccess{``0,``1},System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkQueueAccessQueueServiceProviderInteraction.EnqueueAsyncAccess``1(System.IServiceProvider,AInq.Background.Tasks.IAsyncAccess{``0},System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Enqueue asynchronous access action into registered work queue with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="access"> Access action instance </param>
            <param name="priority"> Access action priority </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access action completion task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> or <paramref name="provider" /> is NULL </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkQueueAccessQueueInteraction.EnqueueAsyncAccess``1(AInq.Background.Services.IWorkQueue,AInq.Background.Tasks.IAsyncAccess{``0},System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkQueueAccessQueueServiceProviderInteraction.EnqueueAsyncAccess``2(System.IServiceProvider,AInq.Background.Tasks.IAsyncAccess{``0,``1},System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Enqueue asynchronous access action into registered work queue with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="access"> Access action instance </param>
            <param name="priority"> Access action priority </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <typeparam name="TResult"> Access action result type </typeparam>
            <returns> Access action completion task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> or <paramref name="provider" /> is NULL </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkQueueAccessQueueInteraction.EnqueueAsyncAccess``2(AInq.Background.Services.IWorkQueue,AInq.Background.Tasks.IAsyncAccess{``0,``1},System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkQueueAccessQueueServiceProviderInteraction.EnqueueAccess``2(System.IServiceProvider,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Enqueue access action into registered work queue with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="priority"> Access action priority </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <typeparam name="TAccess"> Access action type </typeparam>
            <returns> Access action completion task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkQueueAccessQueueInteraction.EnqueueAccess``2(AInq.Background.Services.IWorkQueue,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkQueueAccessQueueServiceProviderInteraction.EnqueueAccess``3(System.IServiceProvider,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Enqueue access action into registered work queue with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="priority"> Access action priority </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <typeparam name="TAccess"> Access action type </typeparam>
            <typeparam name="TResult"> Access action result type </typeparam>
            <returns> Access action completion task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkQueueAccessQueueInteraction.EnqueueAccess``3(AInq.Background.Services.IWorkQueue,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkQueueAccessQueueServiceProviderInteraction.EnqueueAsyncAccess``2(System.IServiceProvider,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Enqueue asynchronous access action into registered work queue with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="priority"> Access action priority </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <typeparam name="TAsyncAccess"> Access action type </typeparam>
            <returns> Access action completion task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkQueueAccessQueueInteraction.EnqueueAsyncAccess``2(AInq.Background.Services.IWorkQueue,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkQueueAccessQueueServiceProviderInteraction.EnqueueAsyncAccess``3(System.IServiceProvider,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Enqueue asynchronous access action into registered work queue with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="priority"> Access action priority </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <typeparam name="TAsyncAccess"> Access action type </typeparam>
            <typeparam name="TResult"> Access action result type </typeparam>
            <returns> Access action completion task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkQueueAccessQueueInteraction.EnqueueAsyncAccess``3(AInq.Background.Services.IWorkQueue,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="T:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction">
            <summary> <see cref="T:AInq.Background.Services.IWorkScheduler" /> extensions to run scheduled access in background queue  </summary>
            <remarks>
                <see cref="T:AInq.Background.Services.IPriorityAccessQueue`1" /> or <see cref="T:AInq.Background.Services.IAccessQueue`1" /> service should be registered on host to run queued
                access
            </remarks>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledQueueAccess``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAccess{``0},System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access scheduler instance </param>
            <param name="access"> Access instance </param>
            <param name="delay"> Access execution delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> or <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater then 00:00:00 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledQueueAccess``2(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAccess{``0,``1},System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access scheduler instance </param>
            <param name="access"> Access instance </param>
            <param name="delay"> Access execution delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> or <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater then 00:00:00 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledAsyncQueueAccess``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncAccess{``0},System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued asynchronous access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access scheduler instance </param>
            <param name="access"> Access instance </param>
            <param name="delay"> Access execution delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> or <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater then 00:00:00 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledAsyncQueueAccess``2(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncAccess{``0,``1},System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued asynchronous access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access scheduler instance </param>
            <param name="access"> Access instance </param>
            <param name="delay"> Access execution delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> or <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater then 00:00:00 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledQueueAccess``2(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access scheduler instance </param>
            <param name="delay"> Access execution delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <typeparam name="TAccess"> Access type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater then 00:00:00 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledQueueAccess``3(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access scheduler instance </param>
            <param name="delay"> Access execution delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <typeparam name="TAccess"> Access type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater then 00:00:00 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledAsyncQueueAccess``2(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued asynchronous access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access scheduler instance </param>
            <param name="delay"> Access execution delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <typeparam name="TAsyncAccess"> Access type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater then 00:00:00 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledAsyncQueueAccess``3(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued asynchronous access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access scheduler instance </param>
            <param name="delay"> Access execution delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <typeparam name="TAsyncAccess"> Access type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater then 00:00:00 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledQueueAccess``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAccess{``0},System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access scheduler instance </param>
            <param name="access"> Access instance </param>
            <param name="time"> Access execution time </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> or <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater then current time </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledQueueAccess``2(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAccess{``0,``1},System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access scheduler instance </param>
            <param name="access"> Access instance </param>
            <param name="time"> Access execution time </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> or <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater then current time </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledAsyncQueueAccess``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncAccess{``0},System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled asynchronous queued access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access scheduler instance </param>
            <param name="access"> Access instance </param>
            <param name="time"> Access execution time </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> or <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater then current time </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledAsyncQueueAccess``2(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncAccess{``0,``1},System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled asynchronous queued access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access scheduler instance </param>
            <param name="access"> Access instance </param>
            <param name="time"> Access execution time </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> or <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater then current time </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledQueueAccess``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access scheduler instance </param>
            <param name="time"> Access execution time </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <typeparam name="TAccess"> Access type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater then current time </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledQueueAccess``3(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access scheduler instance </param>
            <param name="time"> Access execution time </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <typeparam name="TAccess"> Access type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater then current time </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledAsyncQueueAccess``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued asynchronous access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access scheduler instance </param>
            <param name="time"> Access execution time </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <typeparam name="TAsyncAccess"> Access type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater then current time </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledAsyncQueueAccess``3(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued asynchronous access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access scheduler instance </param>
            <param name="time"> Access execution time </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <typeparam name="TAsyncAccess"> Access type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater then current time </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddCronQueueAccess``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAccess{``0},System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access scheduler instance </param>
            <param name="access"> Access instance </param>
            <param name="cronExpression"> Access CRON-based execution schedule </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access result observable </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="access" /> or <paramref name="cronExpression" /> or <paramref name="scheduler" /> is
                NULL
            </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddCronQueueAccess``2(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAccess{``0,``1},System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access scheduler instance </param>
            <param name="access"> Access instance </param>
            <param name="cronExpression"> Access CRON-based execution schedule </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <returns> Access result observable </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="access" /> or <paramref name="cronExpression" /> or <paramref name="scheduler" /> is
                NULL
            </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddCronAsyncQueueAccess``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncAccess{``0},System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued asynchronous access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access scheduler instance </param>
            <param name="access"> Access instance </param>
            <param name="cronExpression"> Access CRON-based execution schedule </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access result observable </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="access" /> or <paramref name="cronExpression" /> or <paramref name="scheduler" /> is
                NULL
            </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddCronAsyncQueueAccess``2(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncAccess{``0,``1},System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued asynchronous access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access scheduler instance </param>
            <param name="access"> Access instance </param>
            <param name="cronExpression"> Access CRON-based execution schedule </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <returns> Access result observable </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="access" /> or <paramref name="cronExpression" /> or <paramref name="scheduler" /> is
                NULL
            </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddCronQueueAccess``2(AInq.Background.Services.IWorkScheduler,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access scheduler instance </param>
            <param name="cronExpression"> Access CRON-based execution schedule </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <typeparam name="TAccess"> Access type </typeparam>
            <returns> Access result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="cronExpression" /> or <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddCronQueueAccess``3(AInq.Background.Services.IWorkScheduler,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access scheduler instance </param>
            <param name="cronExpression"> Access CRON-based execution schedule </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <typeparam name="TAccess"> Access type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <returns> Access result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="cronExpression" /> or <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddCronAsyncQueueAccess``2(AInq.Background.Services.IWorkScheduler,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued asynchronous access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access scheduler instance </param>
            <param name="cronExpression"> Access CRON-based execution schedule </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <typeparam name="TAsyncAccess"> Access type </typeparam>
            <returns> Access result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="cronExpression" /> or <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddCronAsyncQueueAccess``3(AInq.Background.Services.IWorkScheduler,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued asynchronous access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access scheduler instance </param>
            <param name="cronExpression"> Access CRON-based execution schedule </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <typeparam name="TAsyncAccess"> Access type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <returns> Access result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="cronExpression" /> or <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedQueueAccess``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAccess{``0},System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access Scheduler instance </param>
            <param name="access"> Access instance </param>
            <param name="starTime"> Access first execution time </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> or <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedQueueAccess``2(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAccess{``0,``1},System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access Scheduler instance </param>
            <param name="access"> Access instance </param>
            <param name="starTime"> Access first execution time </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> or <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedAsyncQueueAccess``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncAccess{``0},System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access Scheduler instance </param>
            <param name="access"> Access instance </param>
            <param name="starTime"> Access first execution time </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> or <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedAsyncQueueAccess``2(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncAccess{``0,``1},System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access Scheduler instance </param>
            <param name="access"> Access instance </param>
            <param name="starTime"> Access first execution time </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> or <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedQueueAccess``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access Scheduler instance </param>
            <param name="starTime"> Access first execution time</param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <typeparam name="TAccess"> Access type </typeparam>
            <returns> Access result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedQueueAccess``3(AInq.Background.Services.IWorkScheduler,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access Scheduler instance </param>
            <param name="starTime"> Access first execution time</param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <typeparam name="TAccess"> Access type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <returns> Access result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedAsyncQueueAccess``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access Scheduler instance </param>
            <param name="starTime"> Access first execution time</param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <typeparam name="TAsyncAccess"> Access type </typeparam>
            <returns> Access result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedAsyncQueueAccess``3(AInq.Background.Services.IWorkScheduler,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access Scheduler instance </param>
            <param name="starTime"> Access first execution time</param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <typeparam name="TAsyncAccess"> Access type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <returns> Access result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedQueueAccess``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAccess{``0},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access Scheduler instance </param>
            <param name="access"> Access instance </param>
            <param name="startDelay"> Access first execution delay </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> or <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedQueueAccess``2(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAccess{``0,``1},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access Scheduler instance </param>
            <param name="access"> Access instance </param>
            <param name="startDelay"> Access first execution delay </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> or <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedAsyncQueueAccess``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncAccess{``0},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access Scheduler instance </param>
            <param name="access"> Access instance </param>
            <param name="startDelay"> Access first execution delay </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> or <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedAsyncQueueAccess``2(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncAccess{``0,``1},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access Scheduler instance </param>
            <param name="access"> Access instance </param>
            <param name="startDelay"> Access first execution delay </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> or <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedQueueAccess``2(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access Scheduler instance </param>
            <param name="startDelay"> Access first execution delay </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <typeparam name="TAccess"> Access type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedQueueAccess``3(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access Scheduler instance </param>
            <param name="startDelay"> Access first execution delay </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <typeparam name="TAccess"> Access type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedAsyncQueueAccess``2(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access Scheduler instance </param>
            <param name="startDelay"> Access first execution delay </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <typeparam name="TAsyncAccess"> Access type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedAsyncQueueAccess``3(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous access to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Access Scheduler instance </param>
            <param name="startDelay"> Access first execution delay </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <typeparam name="TAsyncAccess"> Access type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00 </exception>
        </member>
        <member name="T:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction">
            <summary> <see cref="T:AInq.Background.Services.IWorkScheduler" /> extensions to run scheduled access in registered background queue  </summary>
            <remarks> <see cref="T:AInq.Background.Services.IWorkScheduler" /> service should be registered on host to schedule work </remarks>
            <remarks>
                <see cref="T:AInq.Background.Services.IPriorityAccessQueue`1" /> or <see cref="T:AInq.Background.Services.IAccessQueue`1" /> service should be registered on host to run queued
                access
            </remarks>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddScheduledQueueAccess``1(System.IServiceProvider,AInq.Background.Tasks.IAccess{``0},System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="access"> Access instance </param>
            <param name="delay"> Access execution delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater then 00:00:00 </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledQueueAccess``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAccess{``0},System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddScheduledQueueAccess``2(System.IServiceProvider,AInq.Background.Tasks.IAccess{``0,``1},System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="access"> Access instance </param>
            <param name="delay"> Access execution delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TResult"> Access result type </typeparam>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater then 00:00:00 </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledQueueAccess``2(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAccess{``0,``1},System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddScheduledAsyncQueueAccess``1(System.IServiceProvider,AInq.Background.Tasks.IAsyncAccess{``0},System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued asynchronous access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="access"> Access instance </param>
            <param name="delay"> Access execution delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater then 00:00:00 </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledAsyncQueueAccess``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncAccess{``0},System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddScheduledAsyncQueueAccess``2(System.IServiceProvider,AInq.Background.Tasks.IAsyncAccess{``0,``1},System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued asynchronous access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="access"> Access instance </param>
            <param name="delay"> Access execution delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TResult"> Access result type </typeparam>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater then 00:00:00 </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledAsyncQueueAccess``2(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncAccess{``0,``1},System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddScheduledQueueAccess``2(System.IServiceProvider,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="delay"> Access execution delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TAccess"> Access type </typeparam>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater then 00:00:00 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledQueueAccess``2(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddScheduledQueueAccess``3(System.IServiceProvider,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="delay"> Access execution delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TAccess"> Access type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater then 00:00:00 </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledQueueAccess``3(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddScheduledAsyncQueueAccess``2(System.IServiceProvider,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued asynchronous access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="delay"> Access execution delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TAsyncAccess"> Access type </typeparam>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater then 00:00:00 </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledAsyncQueueAccess``2(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddScheduledAsyncQueueAccess``3(System.IServiceProvider,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued asynchronous access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="delay"> Access execution delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TAsyncAccess"> Access type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater then 00:00:00 </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledAsyncQueueAccess``3(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddScheduledQueueAccess``1(System.IServiceProvider,AInq.Background.Tasks.IAccess{``0},System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="access"> Access instance </param>
            <param name="time"> Access execution time </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater then current time </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledQueueAccess``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAccess{``0},System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddScheduledQueueAccess``2(System.IServiceProvider,AInq.Background.Tasks.IAccess{``0,``1},System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="access"> Access instance </param>
            <param name="time"> Access execution time </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TResult"> Access result type </typeparam>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater then current time </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledQueueAccess``2(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAccess{``0,``1},System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddScheduledAsyncQueueAccess``1(System.IServiceProvider,AInq.Background.Tasks.IAsyncAccess{``0},System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued asynchronous access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="access"> Access instance </param>
            <param name="time"> Access execution time </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater then current time </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledAsyncQueueAccess``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncAccess{``0},System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddScheduledAsyncQueueAccess``2(System.IServiceProvider,AInq.Background.Tasks.IAsyncAccess{``0,``1},System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued asynchronous access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="access"> Access instance </param>
            <param name="time"> Access execution time </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TResult"> Access result type </typeparam>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater then current time </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledAsyncQueueAccess``2(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncAccess{``0,``1},System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddScheduledQueueAccess``2(System.IServiceProvider,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="time"> Access execution time </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TAccess"> Access type </typeparam>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater then current time </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledQueueAccess``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddScheduledQueueAccess``3(System.IServiceProvider,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="time"> Access execution time </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TAccess"> Access type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater then current time </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledQueueAccess``3(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddScheduledAsyncQueueAccess``2(System.IServiceProvider,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued asynchronous access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="time"> Access execution time </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TAsyncAccess"> Access type </typeparam>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater then current time </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledAsyncQueueAccess``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddScheduledAsyncQueueAccess``3(System.IServiceProvider,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued asynchronous access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="time"> Access execution time </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <typeparam name="TAsyncAccess"> Access type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater then current time </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddScheduledAsyncQueueAccess``3(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddCronQueueAccess``1(System.IServiceProvider,AInq.Background.Tasks.IAccess{``0},System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="access"> Access instance </param>
            <param name="cronExpression"> Access CRON-based execution schedule </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="access" /> or <paramref name="cronExpression" /> or <paramref name="provider" /> is
                NULL
            </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddCronQueueAccess``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAccess{``0},System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddCronQueueAccess``2(System.IServiceProvider,AInq.Background.Tasks.IAccess{``0,``1},System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="access"> Access instance </param>
            <param name="cronExpression"> Access CRON-based execution schedule </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Access result type </typeparam>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="access" /> or <paramref name="cronExpression" /> or <paramref name="provider" /> is
                NULL
            </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddCronQueueAccess``2(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAccess{``0,``1},System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddCronAsyncQueueAccess``1(System.IServiceProvider,AInq.Background.Tasks.IAsyncAccess{``0},System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued asynchronous access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="access"> Access instance </param>
            <param name="cronExpression"> Access CRON-based execution schedule </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="access" /> or <paramref name="cronExpression" /> or <paramref name="provider" /> is
                NULL
            </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddCronAsyncQueueAccess``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncAccess{``0},System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddCronAsyncQueueAccess``2(System.IServiceProvider,AInq.Background.Tasks.IAsyncAccess{``0,``1},System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued asynchronous access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="access"> Access instance </param>
            <param name="cronExpression"> Access CRON-based execution schedule </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Access result type </typeparam>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="access" /> or <paramref name="cronExpression" /> or <paramref name="provider" /> is
                NULL
            </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddCronAsyncQueueAccess``2(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncAccess{``0,``1},System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddCronQueueAccess``2(System.IServiceProvider,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="cronExpression"> Access CRON-based execution schedule </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TAccess"> Access type </typeparam>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="cronExpression" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddCronQueueAccess``2(AInq.Background.Services.IWorkScheduler,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddCronQueueAccess``3(System.IServiceProvider,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="cronExpression"> Access CRON-based execution schedule </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TAccess"> Access type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="cronExpression" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddCronQueueAccess``3(AInq.Background.Services.IWorkScheduler,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddCronAsyncQueueAccess``2(System.IServiceProvider,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued asynchronous access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="cronExpression"> Access CRON-based execution schedule </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncAccess"> Access type </typeparam>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="cronExpression" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddCronAsyncQueueAccess``2(AInq.Background.Services.IWorkScheduler,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddCronAsyncQueueAccess``3(System.IServiceProvider,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued asynchronous access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="cronExpression"> Access CRON-based execution schedule </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncAccess"> Access type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no access scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="cronExpression" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddCronAsyncQueueAccess``3(AInq.Background.Services.IWorkScheduler,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddRepeatedQueueAccess``1(System.IServiceProvider,AInq.Background.Tasks.IAccess{``0},System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="access"> Access instance </param>
            <param name="starTime"> Access first execution time </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00 </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedQueueAccess``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAccess{``0},System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddRepeatedQueueAccess``2(System.IServiceProvider,AInq.Background.Tasks.IAccess{``0,``1},System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="access"> Access instance </param>
            <param name="starTime"> Access first execution time </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Access result type </typeparam>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00 </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedQueueAccess``2(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAccess{``0,``1},System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddRepeatedAsyncQueueAccess``1(System.IServiceProvider,AInq.Background.Tasks.IAsyncAccess{``0},System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="access"> Access instance </param>
            <param name="starTime"> Access first execution time </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00 </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedAsyncQueueAccess``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncAccess{``0},System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddRepeatedAsyncQueueAccess``2(System.IServiceProvider,AInq.Background.Tasks.IAsyncAccess{``0,``1},System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="access"> Access instance </param>
            <param name="starTime"> Access first execution time </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Access result type </typeparam>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00 </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedAsyncQueueAccess``2(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncAccess{``0,``1},System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddRepeatedQueueAccess``2(System.IServiceProvider,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="starTime"> Access first execution time</param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TAccess"> Access type </typeparam>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00 </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedQueueAccess``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddRepeatedQueueAccess``3(System.IServiceProvider,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="starTime"> Access first execution time</param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TAccess"> Access type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00 </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedQueueAccess``3(AInq.Background.Services.IWorkScheduler,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddRepeatedAsyncQueueAccess``2(System.IServiceProvider,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="starTime"> Access first execution time</param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncAccess"> Access type </typeparam>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00 </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedAsyncQueueAccess``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddRepeatedAsyncQueueAccess``3(System.IServiceProvider,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="starTime"> Access first execution time</param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncAccess"> Access type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00 </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedAsyncQueueAccess``3(AInq.Background.Services.IWorkScheduler,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddRepeatedQueueAccess``1(System.IServiceProvider,AInq.Background.Tasks.IAccess{``0},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="access"> Access instance </param>
            <param name="startDelay"> Access first execution delay </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00 </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedQueueAccess``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAccess{``0},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddRepeatedQueueAccess``2(System.IServiceProvider,AInq.Background.Tasks.IAccess{``0,``1},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="access"> Access instance </param>
            <param name="startDelay"> Access first execution delay </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Access result type </typeparam>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00 </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedQueueAccess``2(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAccess{``0,``1},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddRepeatedAsyncQueueAccess``1(System.IServiceProvider,AInq.Background.Tasks.IAsyncAccess{``0},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="access"> Access instance </param>
            <param name="startDelay"> Access first execution delay </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00 </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedAsyncQueueAccess``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncAccess{``0},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddRepeatedAsyncQueueAccess``2(System.IServiceProvider,AInq.Background.Tasks.IAsyncAccess{``0,``1},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="access"> Access instance </param>
            <param name="startDelay"> Access first execution delay </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Access result type </typeparam>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00 </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedAsyncQueueAccess``2(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncAccess{``0,``1},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddRepeatedQueueAccess``2(System.IServiceProvider,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="startDelay"> Access first execution delay </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TAccess"> Access type </typeparam>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00 </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedQueueAccess``2(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddRepeatedQueueAccess``3(System.IServiceProvider,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="startDelay"> Access first execution delay </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TAccess"> Access type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00 </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedQueueAccess``3(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddRepeatedAsyncQueueAccess``2(System.IServiceProvider,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="startDelay"> Access first execution delay </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncAccess"> Access type </typeparam>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00 </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedAsyncQueueAccess``2(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerAccessQueueServiceProviderInteraction.AddRepeatedAsyncQueueAccess``3(System.IServiceProvider,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous access to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="startDelay"> Access first execution delay </param>
            <param name="repeatDelay"> Access repeat delay </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Access priority </param>
            <param name="execCount"> Max access execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncAccess"> Access type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <typeparam name="TResource"> Shared resource type</typeparam>
            <returns> Access result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00 </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerAccessQueueInteraction.AddRepeatedAsyncQueueAccess``3(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="T:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction">
            <summary> <see cref="T:AInq.Background.Services.IWorkScheduler" /> extensions to run scheduled work in background queue  </summary>
            <remarks> <see cref="T:AInq.Background.Services.IPriorityWorkQueue" /> or <see cref="T:AInq.Background.Services.IWorkQueue" /> service should be registered on host to run queued work </remarks>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledQueueWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater then 00:00:00.000 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledQueueWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork{``0},System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater then 00:00:00.000 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledAsyncQueueWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued asynchronous work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater then 00:00:00.000 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledAsyncQueueWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork{``0},System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued asynchronous work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater then 00:00:00.000 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledQueueWork``1(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work scheduler instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TWork"> Work type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater then 00:00:00.000 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledQueueWork``2(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work scheduler instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater then 00:00:00.000 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledAsyncQueueWork``1(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued asynchronous work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work scheduler instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater then 00:00:00.000 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledAsyncQueueWork``2(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued asynchronous work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work scheduler instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater then 00:00:00.000 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledQueueWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater then current time </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledQueueWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork{``0},System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater then current time </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledAsyncQueueWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled asynchronous queued work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater then current time </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledAsyncQueueWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork{``0},System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled asynchronous queued work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater then current time </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledQueueWork``1(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work scheduler instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TWork"> Work type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater then current time </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledQueueWork``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work scheduler instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater then current time </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledAsyncQueueWork``1(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued asynchronous work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work scheduler instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater then current time </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledAsyncQueueWork``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued asynchronous work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work scheduler instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater then current time </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddCronQueueWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="work" /> or <paramref name="cronExpression" /> or <paramref name="scheduler" /> is
                NULL
            </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception><exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less then -1 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddCronQueueWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork{``0},System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="work" /> or <paramref name="cronExpression" /> or <paramref name="scheduler" /> is
                NULL
            </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception><exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less then -1 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddCronAsyncQueueWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued asynchronous work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="work" /> or <paramref name="cronExpression" /> or <paramref name="scheduler" /> is
                NULL
            </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception><exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less then -1 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddCronAsyncQueueWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork{``0},System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued asynchronous work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="work" /> or <paramref name="cronExpression" /> or <paramref name="scheduler" /> is
                NULL
            </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception><exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less then -1 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddCronQueueWork``1(AInq.Background.Services.IWorkScheduler,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work scheduler instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TWork"> Work type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="cronExpression" /> or <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception><exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less then -1 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddCronQueueWork``2(AInq.Background.Services.IWorkScheduler,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work scheduler instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="cronExpression" /> or <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception><exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less then -1 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddCronAsyncQueueWork``1(AInq.Background.Services.IWorkScheduler,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued asynchronous work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work scheduler instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="cronExpression" /> or <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception><exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less then -1 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddCronAsyncQueueWork``2(AInq.Background.Services.IWorkScheduler,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued asynchronous work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work scheduler instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="cronExpression" /> or <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception><exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less then -1 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedQueueWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="starTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or <paramref name="execCount" /> is 0 or less then -1 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedQueueWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork{``0},System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="starTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or <paramref name="execCount" /> is 0 or less then -1 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedAsyncQueueWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="starTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or <paramref name="execCount" /> is 0 or less then -1 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedAsyncQueueWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork{``0},System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="starTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or <paramref name="execCount" /> is 0 or less then -1 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedQueueWork``1(AInq.Background.Services.IWorkScheduler,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="starTime"> Work first execution time</param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TWork"> Work type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or <paramref name="execCount" /> is 0 or less then -1 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedQueueWork``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="starTime"> Work first execution time</param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or <paramref name="execCount" /> is 0 or less then -1 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedAsyncQueueWork``1(AInq.Background.Services.IWorkScheduler,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="starTime"> Work first execution time</param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or <paramref name="execCount" /> is 0 or less then -1 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedAsyncQueueWork``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="starTime"> Work first execution time</param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or <paramref name="execCount" /> is 0 or less then -1 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedQueueWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or <paramref name="execCount" /> is 0 or less then -1 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedQueueWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork{``0},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or <paramref name="execCount" /> is 0 or less then -1 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedAsyncQueueWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or <paramref name="execCount" /> is 0 or less then -1 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedAsyncQueueWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork{``0},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="work"> Work instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or <paramref name="execCount" /> is 0 or less then -1 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedQueueWork``1(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TWork"> Work type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or <paramref name="execCount" /> is 0 or less then -1 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedQueueWork``2(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or <paramref name="execCount" /> is 0 or less then -1 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedAsyncQueueWork``1(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or <paramref name="execCount" /> is 0 or less then -1 </exception>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedAsyncQueueWork``2(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous work to scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="scheduler"> Work Scheduler instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="scheduler" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or <paramref name="execCount" /> is 0 or less then -1 </exception>
        </member>
        <member name="T:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction">
            <summary> <see cref="T:AInq.Background.Services.IWorkScheduler" /> extensions to run scheduled work in registered background queue  </summary>
            <remarks> <see cref="T:AInq.Background.Services.IWorkScheduler" /> service should be registered on host to schedule work </remarks>
            <remarks> <see cref="T:AInq.Background.Services.IPriorityWorkQueue" /> or <see cref="T:AInq.Background.Services.IWorkQueue" /> service should be registered on host to run queued work </remarks>
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddScheduledQueueWork(System.IServiceProvider,AInq.Background.Tasks.IWork,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater then 00:00:00.000 </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledQueueWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddScheduledQueueWork``1(System.IServiceProvider,AInq.Background.Tasks.IWork{``0},System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater then 00:00:00.000 </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledQueueWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork{``0},System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddScheduledAsyncQueueWork(System.IServiceProvider,AInq.Background.Tasks.IAsyncWork,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued asynchronous work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater then 00:00:00.000 </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledAsyncQueueWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddScheduledAsyncQueueWork``1(System.IServiceProvider,AInq.Background.Tasks.IAsyncWork{``0},System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued asynchronous work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater then 00:00:00.000 </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledAsyncQueueWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork{``0},System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddScheduledQueueWork``1(System.IServiceProvider,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TWork"> Work type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater then 00:00:00.000 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledQueueWork``1(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddScheduledQueueWork``2(System.IServiceProvider,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater then 00:00:00.000 </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledQueueWork``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddScheduledAsyncQueueWork``1(System.IServiceProvider,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued asynchronous work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater then 00:00:00.000 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledAsyncQueueWork``1(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddScheduledAsyncQueueWork``2(System.IServiceProvider,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add delayed queued asynchronous work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="delay"> Work execution delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="delay" /> isn't greater then 00:00:00.000 </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledAsyncQueueWork``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddScheduledQueueWork(System.IServiceProvider,AInq.Background.Tasks.IWork,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater then current time </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledQueueWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddScheduledQueueWork``1(System.IServiceProvider,AInq.Background.Tasks.IWork{``0},System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater then current time </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledQueueWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork{``0},System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddScheduledAsyncQueueWork(System.IServiceProvider,AInq.Background.Tasks.IAsyncWork,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued asynchronous work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater then current time </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledAsyncQueueWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddScheduledAsyncQueueWork``1(System.IServiceProvider,AInq.Background.Tasks.IAsyncWork{``0},System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued asynchronous work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater then current time </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledAsyncQueueWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork{``0},System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddScheduledQueueWork``1(System.IServiceProvider,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TWork"> Work type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater then current time </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledQueueWork``1(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddScheduledQueueWork``2(System.IServiceProvider,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater then current time </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledQueueWork``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddScheduledAsyncQueueWork``1(System.IServiceProvider,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued asynchronous work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater then current time </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledAsyncQueueWork``1(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddScheduledAsyncQueueWork``2(System.IServiceProvider,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary> Add scheduled queued asynchronous work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater then current time </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddScheduledAsyncQueueWork``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.Threading.CancellationToken,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddCronQueueWork(System.IServiceProvider,AInq.Background.Tasks.IWork,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <returns> Work result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="work" /> or <paramref name="cronExpression" /> or <paramref name="provider" /> is
                NULL
            </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception><exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less then -1 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddCronQueueWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddCronQueueWork``1(System.IServiceProvider,AInq.Background.Tasks.IWork{``0},System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="work" /> or <paramref name="cronExpression" /> or <paramref name="provider" /> is
                NULL
            </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception><exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less then -1 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddCronQueueWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork{``0},System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddCronAsyncQueueWork(System.IServiceProvider,AInq.Background.Tasks.IAsyncWork,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued asynchronous work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <returns> Work result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="work" /> or <paramref name="cronExpression" /> or <paramref name="provider" /> is
                NULL
            </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception><exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less then -1 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddCronAsyncQueueWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddCronAsyncQueueWork``1(System.IServiceProvider,AInq.Background.Tasks.IAsyncWork{``0},System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued asynchronous work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="work" /> or <paramref name="cronExpression" /> or <paramref name="provider" /> is
                NULL
            </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception><exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less then -1 </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddCronAsyncQueueWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork{``0},System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddCronQueueWork``1(System.IServiceProvider,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TWork"> Work type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="cronExpression" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception><exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less then -1 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddCronQueueWork``1(AInq.Background.Services.IWorkScheduler,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddCronQueueWork``2(System.IServiceProvider,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="cronExpression" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception><exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less then -1 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddCronQueueWork``2(AInq.Background.Services.IWorkScheduler,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddCronAsyncQueueWork``1(System.IServiceProvider,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued asynchronous work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="cronExpression" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception><exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less then -1 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddCronAsyncQueueWork``1(AInq.Background.Services.IWorkScheduler,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddCronAsyncQueueWork``2(System.IServiceProvider,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add CRON-scheduled queued asynchronous work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if no work scheduler is registered </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="cronExpression" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception><exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less then -1 </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddCronAsyncQueueWork``2(AInq.Background.Services.IWorkScheduler,System.String,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddRepeatedQueueWork(System.IServiceProvider,AInq.Background.Tasks.IWork,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="starTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or <paramref name="execCount" /> is 0 or less then -1 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedQueueWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddRepeatedQueueWork``1(System.IServiceProvider,AInq.Background.Tasks.IWork{``0},System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="starTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or <paramref name="execCount" /> is 0 or less then -1 </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedQueueWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork{``0},System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddRepeatedAsyncQueueWork(System.IServiceProvider,AInq.Background.Tasks.IAsyncWork,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="starTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or <paramref name="execCount" /> is 0 or less then -1 </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedAsyncQueueWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddRepeatedAsyncQueueWork``1(System.IServiceProvider,AInq.Background.Tasks.IAsyncWork{``0},System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="starTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or <paramref name="execCount" /> is 0 or less then -1 </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedAsyncQueueWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork{``0},System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddRepeatedQueueWork``1(System.IServiceProvider,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="starTime"> Work first execution time</param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TWork"> Work type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or <paramref name="execCount" /> is 0 or less then -1 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedQueueWork``1(AInq.Background.Services.IWorkScheduler,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddRepeatedQueueWork``2(System.IServiceProvider,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="starTime"> Work first execution time</param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or <paramref name="execCount" /> is 0 or less then -1 </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedQueueWork``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddRepeatedAsyncQueueWork``1(System.IServiceProvider,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="starTime"> Work first execution time</param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or <paramref name="execCount" /> is 0 or less then -1 </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedAsyncQueueWork``1(AInq.Background.Services.IWorkScheduler,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddRepeatedAsyncQueueWork``2(System.IServiceProvider,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="starTime"> Work first execution time</param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or <paramref name="execCount" /> is 0 or less then -1 </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedAsyncQueueWork``2(AInq.Background.Services.IWorkScheduler,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddRepeatedQueueWork(System.IServiceProvider,AInq.Background.Tasks.IWork,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or <paramref name="execCount" /> is 0 or less then -1 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedQueueWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddRepeatedQueueWork``1(System.IServiceProvider,AInq.Background.Tasks.IWork{``0},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or <paramref name="execCount" /> is 0 or less then -1 </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedQueueWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IWork{``0},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddRepeatedAsyncQueueWork(System.IServiceProvider,AInq.Background.Tasks.IAsyncWork,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or <paramref name="execCount" /> is 0 or less then -1 </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedAsyncQueueWork(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddRepeatedAsyncQueueWork``1(System.IServiceProvider,AInq.Background.Tasks.IAsyncWork{``0},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="work"> Work instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or <paramref name="execCount" /> is 0 or less then -1 </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedAsyncQueueWork``1(AInq.Background.Services.IWorkScheduler,AInq.Background.Tasks.IAsyncWork{``0},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddRepeatedQueueWork``1(System.IServiceProvider,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TWork"> Work type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or <paramref name="execCount" /> is 0 or less then -1 </exception>
            <seealso cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedQueueWork``1(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddRepeatedQueueWork``2(System.IServiceProvider,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or <paramref name="execCount" /> is 0 or less then -1 </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedQueueWork``2(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddRepeatedAsyncQueueWork``1(System.IServiceProvider,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or <paramref name="execCount" /> is 0 or less then -1 </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedAsyncQueueWork``1(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:AInq.Background.Interaction.WorkSchedulerWorkQueueServiceProviderInteraction.AddRepeatedAsyncQueueWork``2(System.IServiceProvider,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)">
            <summary> Add repeated queued asynchronous work to registered scheduler with given <paramref name="priority" /> (if supported) </summary>
            <param name="provider"> Service provider instance </param>
            <param name="startDelay"> Work first execution delay </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="provider" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or <paramref name="execCount" /> is 0 or less then -1 </exception>
            <seealso
                cref="M:AInq.Background.Interaction.WorkSchedulerWorkQueueInteraction.AddRepeatedAsyncQueueWork``2(AInq.Background.Services.IWorkScheduler,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="T:AInq.Background.Services.IAccessQueue`1">
            <summary> Interface for background shared resource access queue </summary>
            <typeparam name="TResource"> Shared resource type</typeparam>
        </member>
        <member name="P:AInq.Background.Services.IAccessQueue`1.MaxAttempts">
            <summary> Max allowed retry on fail attempts </summary>
        </member>
        <member name="M:AInq.Background.Services.IAccessQueue`1.EnqueueAccess(AInq.Background.Tasks.IAccess{`0},System.Threading.CancellationToken,System.Int32)">
            <summary> Enqueue access action </summary>
            <param name="access"> Access action instance </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <returns> Access action completion task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.Services.IAccessQueue`1.EnqueueAccess``1(AInq.Background.Tasks.IAccess{`0,``0},System.Threading.CancellationToken,System.Int32)">
            <summary> Enqueue access action </summary>
            <param name="access"> Access action instance </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <typeparam name="TResult"> Access action result type </typeparam>
            <returns> Access action result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.Services.IAccessQueue`1.EnqueueAsyncAccess(AInq.Background.Tasks.IAsyncAccess{`0},System.Threading.CancellationToken,System.Int32)">
            <summary> Enqueue asynchronous access action </summary>
            <param name="access"> Access action instance </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <returns> Access action completion task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.Services.IAccessQueue`1.EnqueueAsyncAccess``1(AInq.Background.Tasks.IAsyncAccess{`0,``0},System.Threading.CancellationToken,System.Int32)">
            <summary> Enqueue asynchronous access action </summary>
            <param name="access"> Access action instance </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <typeparam name="TResult"> Access action result type </typeparam>
            <returns> Access action result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> is NULL </exception>
        </member>
        <member name="T:AInq.Background.Services.IConveyor`2">
            <summary> Interface for background data processing conveyor </summary>
            <typeparam name="TData"> Input data type </typeparam>
            <typeparam name="TResult"> Processing result type </typeparam>
        </member>
        <member name="P:AInq.Background.Services.IConveyor`2.MaxAttempts">
            <summary> Max allowed retry on fail attempts </summary>
        </member>
        <member name="M:AInq.Background.Services.IConveyor`2.ProcessDataAsync(`0,System.Threading.CancellationToken,System.Int32)">
            <summary> Process data asynchronously in queue </summary>
            <param name="data"> Data to process </param>
            <param name="cancellation"> Processing cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <returns> Processing result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="data" /> is NULL </exception>
        </member>
        <member name="T:AInq.Background.Services.IPriorityAccessQueue`1">
            <summary> Interface for background shared resource access queue with prioritization </summary>
            <typeparam name="TResource"> Shared resource type</typeparam>
        </member>
        <member name="P:AInq.Background.Services.IPriorityAccessQueue`1.MaxPriority">
            <summary> Max allowed access priority </summary>
        </member>
        <member name="M:AInq.Background.Services.IPriorityAccessQueue`1.EnqueueAccess(AInq.Background.Tasks.IAccess{`0},System.Int32,System.Threading.CancellationToken,System.Int32)">
            <summary> Enqueue access action </summary>
            <param name="access"> Access action instance </param>
            <param name="priority"> Access action priority </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <returns> Access action completion task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.Services.IPriorityAccessQueue`1.EnqueueAccess``1(AInq.Background.Tasks.IAccess{`0,``0},System.Int32,System.Threading.CancellationToken,System.Int32)">
            <summary> Enqueue access action </summary>
            <param name="access"> Access action instance </param>
            <param name="priority"> Access action priority </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <typeparam name="TResult"> Access action result type </typeparam>
            <returns> Access action result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.Services.IPriorityAccessQueue`1.EnqueueAsyncAccess(AInq.Background.Tasks.IAsyncAccess{`0},System.Int32,System.Threading.CancellationToken,System.Int32)">
            <summary> Enqueue asynchronous access action </summary>
            <param name="access"> Access action instance </param>
            <param name="priority"> Access action priority </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <returns> Access action completion task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.Services.IPriorityAccessQueue`1.EnqueueAsyncAccess``1(AInq.Background.Tasks.IAsyncAccess{`0,``0},System.Int32,System.Threading.CancellationToken,System.Int32)">
            <summary> Enqueue asynchronous access action </summary>
            <param name="access"> Access action instance </param>
            <param name="priority"> Access action priority </param>
            <param name="cancellation"> Access cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <typeparam name="TResult"> Access action result type </typeparam>
            <returns> Access action result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="access" /> is NULL </exception>
        </member>
        <member name="T:AInq.Background.Services.IPriorityConveyor`2">
            <summary> Interface for background data processing conveyor with prioritization </summary>
            <typeparam name="TData"> Input data type </typeparam>
            <typeparam name="TResult"> Processing result type </typeparam>
        </member>
        <member name="P:AInq.Background.Services.IPriorityConveyor`2.MaxPriority">
            <summary> Max allowed operation priority </summary>
        </member>
        <member name="M:AInq.Background.Services.IPriorityConveyor`2.ProcessDataAsync(`0,System.Int32,System.Threading.CancellationToken,System.Int32)">
            <summary> Process data asynchronously in queue with given <paramref name="priority" /> </summary>
            <param name="data"> Data to process </param>
            <param name="priority"> Operation priority </param>
            <param name="cancellation"> Processing cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <returns> Processing result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="data" /> is NULL </exception>
        </member>
        <member name="T:AInq.Background.Services.IPriorityWorkQueue">
            <summary> Interface for background work queue with prioritization </summary>
        </member>
        <member name="P:AInq.Background.Services.IPriorityWorkQueue.MaxPriority">
            <summary> Max allowed work priority </summary>
        </member>
        <member name="M:AInq.Background.Services.IPriorityWorkQueue.EnqueueWork(AInq.Background.Tasks.IWork,System.Int32,System.Threading.CancellationToken,System.Int32)">
            <summary> Enqueue background work with given <paramref name="priority" /> </summary>
            <param name="work"> Work instance </param>
            <param name="priority"> Work priority </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <returns> Work completion task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.Services.IPriorityWorkQueue.EnqueueWork``1(AInq.Background.Tasks.IWork{``0},System.Int32,System.Threading.CancellationToken,System.Int32)">
            <summary> Enqueue background work with given <paramref name="priority" /> </summary>
            <param name="work"> Work instance </param>
            <param name="priority"> Work priority </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.Services.IPriorityWorkQueue.EnqueueAsyncWork(AInq.Background.Tasks.IAsyncWork,System.Int32,System.Threading.CancellationToken,System.Int32)">
            <summary> Enqueue asynchronous background work with given <paramref name="priority" /> </summary>
            <param name="work"> Work instance </param>
            <param name="priority"> Work priority </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <returns> Work completion task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.Services.IPriorityWorkQueue.EnqueueAsyncWork``1(AInq.Background.Tasks.IAsyncWork{``0},System.Int32,System.Threading.CancellationToken,System.Int32)">
            <summary> Enqueue asynchronous background work with given <paramref name="priority" /> </summary>
            <param name="work"> Work instance </param>
            <param name="priority"> Work priority </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> is NULL </exception>
        </member>
        <member name="T:AInq.Background.Services.IWorkQueue">
            <summary> Interface for background work queue </summary>
        </member>
        <member name="P:AInq.Background.Services.IWorkQueue.MaxAttempts">
            <summary> Max allowed retry on fail attempts </summary>
        </member>
        <member name="M:AInq.Background.Services.IWorkQueue.EnqueueWork(AInq.Background.Tasks.IWork,System.Threading.CancellationToken,System.Int32)">
            <summary> Enqueue background work </summary>
            <param name="work"> Work instance </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <returns> Work completion task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.Services.IWorkQueue.EnqueueWork``1(AInq.Background.Tasks.IWork{``0},System.Threading.CancellationToken,System.Int32)">
            <summary> Enqueue background work </summary>
            <param name="work"> Work instance </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.Services.IWorkQueue.EnqueueAsyncWork(AInq.Background.Tasks.IAsyncWork,System.Threading.CancellationToken,System.Int32)">
            <summary> Enqueue asynchronous background work </summary>
            <param name="work"> Work instance </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <returns> Work completion task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.Services.IWorkQueue.EnqueueAsyncWork``1(AInq.Background.Tasks.IAsyncWork{``0},System.Threading.CancellationToken,System.Int32)">
            <summary> Enqueue asynchronous background work </summary>
            <param name="work"> Work instance </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> is NULL </exception>
        </member>
        <member name="T:AInq.Background.Services.IWorkScheduler">
            <summary> Interface for work scheduler service </summary>
        </member>
        <member name="M:AInq.Background.Services.IWorkScheduler.AddScheduledWork(AInq.Background.Tasks.IWork,System.DateTime,System.Threading.CancellationToken)">
            <summary> Add scheduled work to scheduler </summary>
            <param name="work"> Work instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater then current time </exception>
        </member>
        <member name="M:AInq.Background.Services.IWorkScheduler.AddScheduledWork``1(AInq.Background.Tasks.IWork{``0},System.DateTime,System.Threading.CancellationToken)">
            <summary> Add scheduled work to scheduler </summary>
            <param name="work"> Work instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater then current time </exception>
        </member>
        <member name="M:AInq.Background.Services.IWorkScheduler.AddScheduledAsyncWork(AInq.Background.Tasks.IAsyncWork,System.DateTime,System.Threading.CancellationToken)">
            <summary> Add scheduled asynchronous work to scheduler </summary>
            <param name="work"> Work instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater then current time </exception>
        </member>
        <member name="M:AInq.Background.Services.IWorkScheduler.AddScheduledAsyncWork``1(AInq.Background.Tasks.IAsyncWork{``0},System.DateTime,System.Threading.CancellationToken)">
            <summary> Add scheduled asynchronous work to scheduler </summary>
            <param name="work"> Work instance </param>
            <param name="time"> Work execution time </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result task </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> isn't greater then current time </exception>
        </member>
        <member name="M:AInq.Background.Services.IWorkScheduler.AddCronWork(AInq.Background.Tasks.IWork,System.String,System.Threading.CancellationToken,System.Int32)">
            <summary> Add CRON-scheduled work to scheduler </summary>
            <param name="work"> Work instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="cronExpression" /> is NULL </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less then -1 </exception>
        </member>
        <member name="M:AInq.Background.Services.IWorkScheduler.AddCronWork``1(AInq.Background.Tasks.IWork{``0},System.String,System.Threading.CancellationToken,System.Int32)">
            <summary> Add CRON-scheduled work to scheduler </summary>
            <param name="work"> Work instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="cronExpression" /> is NULL </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less then -1 </exception>
        </member>
        <member name="M:AInq.Background.Services.IWorkScheduler.AddCronAsyncWork(AInq.Background.Tasks.IAsyncWork,System.String,System.Threading.CancellationToken,System.Int32)">
            <summary> Add CRON-scheduled asynchronous work to scheduler </summary>
            <param name="work"> Work instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="cronExpression" /> is NULL </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less then -1 </exception>
        </member>
        <member name="M:AInq.Background.Services.IWorkScheduler.AddCronAsyncWork``1(AInq.Background.Tasks.IAsyncWork{``0},System.String,System.Threading.CancellationToken,System.Int32)">
            <summary> Add CRON-scheduled asynchronous work to scheduler </summary>
            <param name="work"> Work instance </param>
            <param name="cronExpression"> Work CRON-based execution schedule </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="cronExpression" /> is NULL </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less then -1 </exception>
        </member>
        <member name="M:AInq.Background.Services.IWorkScheduler.AddRepeatedWork(AInq.Background.Tasks.IWork,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated work to scheduler </summary>
            <param name="work"> Work instance </param>
            <param name="starTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or <paramref name="execCount" /> is 0 or less then -1 </exception>
        </member>
        <member name="M:AInq.Background.Services.IWorkScheduler.AddRepeatedWork``1(AInq.Background.Tasks.IWork{``0},System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated work to scheduler </summary>
            <param name="work"> Work instance </param>
            <param name="starTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or <paramref name="execCount" /> is 0 or less then -1 </exception>
        </member>
        <member name="M:AInq.Background.Services.IWorkScheduler.AddRepeatedAsyncWork(AInq.Background.Tasks.IAsyncWork,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated asynchronous work to scheduler </summary>
            <param name="work"> Work instance </param>
            <param name="startTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or <paramref name="execCount" /> is 0 or less then -1 </exception>
        </member>
        <member name="M:AInq.Background.Services.IWorkScheduler.AddRepeatedAsyncWork``1(AInq.Background.Tasks.IAsyncWork{``0},System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Add repeated asynchronous work to scheduler </summary>
            <param name="work"> Work instance </param>
            <param name="startTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> Work result observable </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or <paramref name="execCount" /> is 0 or less then -1 </exception>
        </member>
        <member name="T:AInq.Background.Tasks.AccessConverter">
            <summary> Extension class for converting <see cref="T:AInq.Background.Tasks.IAccess`1" /> to <see cref="T:AInq.Background.Tasks.IAsyncAccess`1" /> </summary>
        </member>
        <member name="M:AInq.Background.Tasks.AccessConverter.AsAsync``1(AInq.Background.Tasks.IAccess{``0})">
            <summary> Create <see cref="T:AInq.Background.Tasks.IAsyncAccess`1" /> from <see cref="T:AInq.Background.Tasks.IAccess`1" /> </summary>
            <param name="access"> Access instance </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> <see cref="T:AInq.Background.Tasks.IAsyncAccess`1" /> wrapper instance </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown when <paramref name="access" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.Tasks.AccessConverter.AsAsync``2(AInq.Background.Tasks.IAccess{``0,``1})">
            <summary> Create <see cref="T:AInq.Background.Tasks.IAsyncAccess`2" /> from <see cref="T:AInq.Background.Tasks.IAccess`2" /> </summary>
            <param name="access"> Access instance </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <returns> <see cref="T:AInq.Background.Tasks.IAsyncAccess`2" /> wrapper instance </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown when <paramref name="access" /> is NULL </exception>
        </member>
        <member name="T:AInq.Background.Tasks.AccessFactory">
            <summary> Factory class for creating <see cref="T:AInq.Background.Tasks.IAccess`1" /> and <see cref="T:AInq.Background.Tasks.IAsyncAccess`1" /> from delegates </summary>
        </member>
        <member name="M:AInq.Background.Tasks.AccessFactory.CreateAccess``1(System.Action{``0,System.IServiceProvider})">
            <summary> Create <see cref="T:AInq.Background.Tasks.IAccess`1" /> instance from <see cref="T:System.Action`2" /> </summary>
            <param name="access"> Access action </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> <see cref="T:AInq.Background.Tasks.IAccess`1" /> instance for given action </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown when <paramref name="access" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.Tasks.AccessFactory.CreateAccess``2(System.Func{``0,System.IServiceProvider,``1})">
            <summary> Create <see cref="T:AInq.Background.Tasks.IAccess`2" /> instance from <see cref="T:System.Func`3" /> </summary>
            <param name="access"> Access function </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <returns> <see cref="T:AInq.Background.Tasks.IAccess`2" /> instance for given function </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown when <paramref name="access" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.Tasks.AccessFactory.CreateAsyncAccess``1(System.Func{``0,System.IServiceProvider,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
                Create <see cref="T:AInq.Background.Tasks.IAsyncAccess`1" /> instance from <see cref="T:System.Func`4" />
            </summary>
            <param name="access"> Access action </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <returns> <see cref="T:AInq.Background.Tasks.IAsyncAccess`1" /> instance for given action </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown when <paramref name="access" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.Tasks.AccessFactory.CreateAsyncAccess``2(System.Func{``0,System.IServiceProvider,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}})">
            <summary>
                Create <see cref="T:AInq.Background.Tasks.IAsyncAccess`2" /> instance from
                <see cref="T:System.Func`4" />
            </summary>
            <param name="access"> Access function </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <typeparam name="TResult"> Access result type </typeparam>
            <returns> <see cref="T:AInq.Background.Tasks.IAsyncAccess`2" /> instance for given function </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown when <paramref name="access" /> is NULL </exception>
        </member>
        <member name="T:AInq.Background.Tasks.IAccess`1">
            <summary> Interface for synchronous access to shared resource of type <typeparamref name="TResource" /> without result </summary>
            <typeparam name="TResource"> Shared resource type </typeparam>
        </member>
        <member name="M:AInq.Background.Tasks.IAccess`1.Access(`0,System.IServiceProvider)">
            <summary> Access action </summary>
            <param name="resource"> Shared resource instance </param>
            <param name="serviceProvider"> Service provider instance </param>
        </member>
        <member name="T:AInq.Background.Tasks.IAccess`2">
            <summary>
                Interface for synchronous access to shared resource of type <typeparamref name="TResource" /> with result of type
                <typeparamref name="TResult" />
            </summary>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <typeparam name="TResult"> Access action result type </typeparam>
        </member>
        <member name="M:AInq.Background.Tasks.IAccess`2.Access(`0,System.IServiceProvider)">
            <summary> Access action </summary>
            <param name="resource"> Shared resource instance </param>
            <param name="serviceProvider"> Service provider instance </param>
            <returns> Access action result </returns>
        </member>
        <member name="T:AInq.Background.Tasks.IAsyncAccess`1">
            <summary> Interface for asynchronous access to shared resource of type <typeparamref name="TResource" /> without result </summary>
            <typeparam name="TResource"> Shared resource type </typeparam>
        </member>
        <member name="M:AInq.Background.Tasks.IAsyncAccess`1.AccessAsync(`0,System.IServiceProvider,System.Threading.CancellationToken)">
            <summary> Asynchronous access action </summary>
            <param name="resource"> Shared resource instance </param>
            <param name="serviceProvider"> Service provider instance </param>
            <param name="cancellation"> Access action cancellation token </param>
            <returns> Access action completion task </returns>
        </member>
        <member name="T:AInq.Background.Tasks.IAsyncAccess`2">
            <summary>
                Interface for asynchronous access to shared resource of type <typeparamref name="TResource" /> with result of type
                <typeparamref name="TResult" />
            </summary>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <typeparam name="TResult"> Access action result type </typeparam>
        </member>
        <member name="M:AInq.Background.Tasks.IAsyncAccess`2.AccessAsync(`0,System.IServiceProvider,System.Threading.CancellationToken)">
            <summary> Asynchronous access action </summary>
            <param name="resource"> Shared resource instance </param>
            <param name="serviceProvider"> Service provider instance </param>
            <param name="cancellation"> Access action cancellation token </param>
            <returns> Access action result task </returns>
        </member>
        <member name="T:AInq.Background.Tasks.IAsyncWork">
            <summary> Interface for asynchronous work without result </summary>
        </member>
        <member name="M:AInq.Background.Tasks.IAsyncWork.DoWorkAsync(System.IServiceProvider,System.Threading.CancellationToken)">
            <summary> Asynchronous work action </summary>
            <param name="serviceProvider"> Service provider instance </param>
            <param name="cancellation"> Work cancellation token </param>
            <returns> Work completion task </returns>
        </member>
        <member name="T:AInq.Background.Tasks.IAsyncWork`1">
            <summary> Interface for asynchronous work with result of type <typeparamref name="TResult" /> </summary>
            <typeparam name="TResult"> Work result type </typeparam>
        </member>
        <member name="M:AInq.Background.Tasks.IAsyncWork`1.DoWorkAsync(System.IServiceProvider,System.Threading.CancellationToken)">
            <summary> Asynchronous work action </summary>
            <param name="serviceProvider"> Service provider instance </param>
            <param name="cancellation"> Work cancellation token </param>
            <returns> Work result task </returns>
        </member>
        <member name="T:AInq.Background.Tasks.IConveyorMachine`2">
            <summary> Interface for data processing machine for <see cref="T:AInq.Background.Services.IConveyor`2" /> </summary>
            <typeparam name="TData"> Input data type </typeparam>
            <typeparam name="TResult"> Processing result type </typeparam>
        </member>
        <member name="M:AInq.Background.Tasks.IConveyorMachine`2.ProcessDataAsync(`0,System.IServiceProvider,System.Threading.CancellationToken)">
            <summary> Process data asynchronously </summary>
            <param name="data"> Data to process </param>
            <param name="provider"> Service provider instance </param>
            <param name="cancellation"> Processing cancellation token </param>
            <returns> Processing result task </returns>
        </member>
        <member name="T:AInq.Background.Tasks.IStartStoppable">
            <summary> Interface for object which need to be activated/deactivated before/after usage </summary>
            <remarks> Used in <see cref="T:AInq.Background.Services.IConveyor`2" /> and <see cref="T:AInq.Background.Services.IAccessQueue`1" /></remarks>
        </member>
        <member name="P:AInq.Background.Tasks.IStartStoppable.IsActive">
            <summary> Shows if object is active now </summary>
        </member>
        <member name="M:AInq.Background.Tasks.IStartStoppable.ActivateAsync(System.Threading.CancellationToken)">
            <summary> Activate object asynchronously </summary>
            <param name="cancellation"> Activation cancellation token </param>
            <returns> Activation completion task </returns>
        </member>
        <member name="M:AInq.Background.Tasks.IStartStoppable.DeactivateAsync(System.Threading.CancellationToken)">
            <summary> Deactivate object asynchronously  </summary>
            <param name="cancellation"> Deactivation cancellation token </param>
            <returns> Deactivation completion task </returns>
        </member>
        <member name="T:AInq.Background.Tasks.IThrottling">
            <summary> Interface for objects need to have timeout before reuse </summary>
            <remarks> Used in <see cref="T:AInq.Background.Services.IConveyor`2" /> and <see cref="T:AInq.Background.Services.IAccessQueue`1" /></remarks>
        </member>
        <member name="P:AInq.Background.Tasks.IThrottling.Timeout">
            <summary> Timeout duration </summary>
        </member>
        <member name="T:AInq.Background.Tasks.IWork">
            <summary> Interface for synchronous work without result </summary>
        </member>
        <member name="M:AInq.Background.Tasks.IWork.DoWork(System.IServiceProvider)">
            <summary> Work action </summary>
            <param name="serviceProvider"> Service provider instance </param>
        </member>
        <member name="T:AInq.Background.Tasks.IWork`1">
            <summary> Interface for synchronous work with result of type <typeparamref name="TResult" /> </summary>
            <typeparam name="TResult"> Work result type </typeparam>
        </member>
        <member name="M:AInq.Background.Tasks.IWork`1.DoWork(System.IServiceProvider)">
            <summary> Work action </summary>
            <param name="serviceProvider"> Service provider instance </param>
            <returns> Work result </returns>
        </member>
        <member name="T:AInq.Background.Tasks.WorkConverter">
            <summary> Extension class for converting <see cref="T:AInq.Background.Tasks.IWork" /> to <see cref="T:AInq.Background.Tasks.IAsyncWork" /> </summary>
        </member>
        <member name="M:AInq.Background.Tasks.WorkConverter.AsAsync(AInq.Background.Tasks.IWork)">
            <summary> Create <see cref="T:AInq.Background.Tasks.IAsyncWork" /> from <see cref="T:AInq.Background.Tasks.IWork" /> </summary>
            <param name="work"> Work instance </param>
            <returns> <see cref="T:AInq.Background.Tasks.IAsyncWork`1" /> wrapper instance </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown when <paramref name="work" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.Tasks.WorkConverter.AsAsync``1(AInq.Background.Tasks.IWork{``0})">
            <summary> Create <see cref="T:AInq.Background.Tasks.IAsyncWork`1" /> from <see cref="T:AInq.Background.Tasks.IWork`1" /> </summary>
            <param name="work"> Work instance </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> <see cref="T:AInq.Background.Tasks.IAsyncWork`1" /> wrapper instance </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown when <paramref name="work" /> is NULL </exception>
        </member>
        <member name="T:AInq.Background.Tasks.WorkFactory">
            <summary> Factory class for creating <see cref="T:AInq.Background.Tasks.IWork" /> and <see cref="T:AInq.Background.Tasks.IAsyncWork" /> from delegates </summary>
        </member>
        <member name="M:AInq.Background.Tasks.WorkFactory.CreateWork(System.Action{System.IServiceProvider})">
            <summary> Create <see cref="T:AInq.Background.Tasks.IWork" /> instance from <see cref="T:System.Action`1" /> </summary>
            <param name="work"> Work action </param>
            <returns> <see cref="T:AInq.Background.Tasks.IWork" /> instance for given action </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown when <paramref name="work" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.Tasks.WorkFactory.CreateWork``1(System.Func{System.IServiceProvider,``0})">
            <summary> Create <see cref="T:AInq.Background.Tasks.IWork`1" /> instance from <see cref="T:System.Func`2" /> </summary>
            <param name="work"> Work function </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> <see cref="T:AInq.Background.Tasks.IWork`1" /> instance for given function </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown when <paramref name="work" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.Tasks.WorkFactory.CreateAsyncWork(System.Func{System.IServiceProvider,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary> Create <see cref="T:AInq.Background.Tasks.IAsyncWork" /> instance from <see cref="T:System.Func`3" /> </summary>
            <param name="work"> Work action </param>
            <returns> <see cref="T:AInq.Background.Tasks.IAsyncWork" /> instance for given action </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown when <paramref name="work" /> is NULL </exception>
        </member>
        <member name="M:AInq.Background.Tasks.WorkFactory.CreateAsyncWork``1(System.Func{System.IServiceProvider,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}})">
            <summary> Create <see cref="T:AInq.Background.Tasks.IAsyncWork`1" /> instance from <see cref="T:System.Func`3" /> </summary>
            <param name="work"> Work function </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <returns> <see cref="T:AInq.Background.Tasks.IAsyncWork`1" /> instance for given function </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown when <paramref name="work" /> is NULL </exception>
        </member>
    </members>
</doc>
