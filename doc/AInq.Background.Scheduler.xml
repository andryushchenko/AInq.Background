<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AInq.Background.Scheduler</name>
    </assembly>
    <members>
        <member name="T:AInq.Background.Helpers.CronHelper">
            <summary> Cron expression parsing utility </summary>
        </member>
        <member name="M:AInq.Background.Helpers.CronHelper.ParseCron(System.String)">
            <summary> Parse cron string with format auto detection </summary>
            <param name="cronExpression"> Cron string </param>
            <returns> <see cref="T:Cronos.CronExpression" /> instance </returns>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="cronExpression" /> has incorrect syntax </exception>
        </member>
        <member name="T:AInq.Background.Managers.IWorkSchedulerManager">
            <summary> Interface for background work scheduler manager </summary>
        </member>
        <member name="M:AInq.Background.Managers.IWorkSchedulerManager.WaitForNewTaskAsync(System.Threading.CancellationToken)">
            <summary> Asynchronously wait for new scheduled task </summary>
            <param name="cancellation"> Wait cancellation token </param>
        </member>
        <member name="M:AInq.Background.Managers.IWorkSchedulerManager.GetNextTaskTime">
            <summary> Get next scheduled task execution time </summary>
            <returns> Time or NULL if no tasks </returns>
        </member>
        <member name="M:AInq.Background.Managers.IWorkSchedulerManager.GetUpcomingTasks(System.TimeSpan)">
            <summary> Get upcoming scheduled tasks within given <paramref name="horizon" /> </summary>
            <param name="horizon"> Upcoming task search horizon </param>
            <returns> Task wrappers collection grouped by time </returns>
        </member>
        <member name="M:AInq.Background.Managers.IWorkSchedulerManager.RevertTask(AInq.Background.Wrappers.IScheduledTaskWrapper)">
            <summary> Revert task to scheduler </summary>
            <param name="task"> Task instance </param>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="task" /> is NULL </exception>
        </member>
        <member name="T:AInq.Background.Managers.WorkSchedulerManager">
            <summary> Work scheduler manager </summary>
        </member>
        <member name="T:AInq.Background.Workers.SchedulerWorker">
            <summary> Background scheduled task worker service </summary>
        </member>
        <member name="M:AInq.Background.Workers.SchedulerWorker.#ctor(AInq.Background.Managers.IWorkSchedulerManager,System.IServiceProvider,System.Nullable{System.TimeSpan})">
            <param name="scheduler"> Work scheduler manager instance </param>
            <param name="provider"> Service provider instance </param>
            <param name="horizon"> Upcoming task search horizon </param>
        </member>
        <member name="T:AInq.Background.WorkSchedulerInjection">
            <summary> Work Scheduler dependency injection </summary>
        </member>
        <member name="M:AInq.Background.WorkSchedulerInjection.CreateWorkScheduler(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Nullable{System.TimeSpan})">
            <summary> Create <see cref="T:AInq.Background.Services.IWorkScheduler" /> without service registration </summary>
            <param name="services"> Service collection</param>
            <param name="horizon"> Time horizon to look for upcoming tasks </param>
        </member>
        <member name="M:AInq.Background.WorkSchedulerInjection.AddWorkScheduler(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Nullable{System.TimeSpan})">
            <summary> Add <see cref="T:AInq.Background.Services.IWorkScheduler" /> service </summary>
            <param name="services"> Service collection</param>
            <param name="horizon"> Time horizon to look for upcoming tasks </param>
            <exception cref="T:System.InvalidOperationException"> Thrown if service already exists </exception>
        </member>
        <member name="T:AInq.Background.Wrappers.CronWorkWrapperFactory">
            <summary> Factory class for creating <see cref="T:AInq.Background.Wrappers.IScheduledTaskWrapper" /> for CRON scheduled work </summary>
        </member>
        <member name="M:AInq.Background.Wrappers.CronWorkWrapperFactory.CreateCronWorkWrapper(AInq.Background.Tasks.IWork,Cronos.CronExpression,System.Threading.CancellationToken,System.Int32)">
            <summary> Create <see cref="T:AInq.Background.Wrappers.IScheduledTaskWrapper" /> for given <paramref name="work" /> scheduled by <paramref name="cron" /> </summary>
            <param name="work"> Work instance </param>
            <param name="cron"> Cron expression </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="cron" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less then -1 </exception>
            <returns> Wrapper and work result observable </returns>
        </member>
        <member name="M:AInq.Background.Wrappers.CronWorkWrapperFactory.CreateCronWorkWrapper``1(AInq.Background.Tasks.IWork{``0},Cronos.CronExpression,System.Threading.CancellationToken,System.Int32)">
            <summary> Create <see cref="T:AInq.Background.Wrappers.IScheduledTaskWrapper" /> for given <paramref name="work" /> scheduled by <paramref name="cron" /> </summary>
            <param name="work"> Work instance </param>
            <param name="cron"> Cron expression </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="cron" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less then -1 </exception>
            <returns> Wrapper and work result observable </returns>
        </member>
        <member name="M:AInq.Background.Wrappers.CronWorkWrapperFactory.CreateCronWorkWrapper(AInq.Background.Tasks.IAsyncWork,Cronos.CronExpression,System.Threading.CancellationToken,System.Int32)">
            <summary> Create <see cref="T:AInq.Background.Wrappers.IScheduledTaskWrapper" /> for given <paramref name="work" /> scheduled by <paramref name="cron" /> </summary>
            <param name="work"> Work instance </param>
            <param name="cron"> Cron expression </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="cron" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less then -1 </exception>
            <returns> Wrapper and work result observable </returns>
        </member>
        <member name="M:AInq.Background.Wrappers.CronWorkWrapperFactory.CreateCronWorkWrapper``1(AInq.Background.Tasks.IAsyncWork{``0},Cronos.CronExpression,System.Threading.CancellationToken,System.Int32)">
            <summary> Create <see cref="T:AInq.Background.Wrappers.IScheduledTaskWrapper" /> for given <paramref name="work" /> scheduled by <paramref name="cron" /> </summary>
            <param name="work"> Work instance </param>
            <param name="cron"> Cron expression </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> or <paramref name="cron" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="execCount" /> is 0 or less then -1 </exception>
            <returns> Wrapper and work result observable </returns>
        </member>
        <member name="T:AInq.Background.Wrappers.IScheduledTaskWrapper">
            <summary> Interface for scheduled background task wrapper </summary>
        </member>
        <member name="P:AInq.Background.Wrappers.IScheduledTaskWrapper.NextScheduledTime">
            <summary> Next scheduled time </summary>
        </member>
        <member name="P:AInq.Background.Wrappers.IScheduledTaskWrapper.IsCanceled">
            <summary> Check if task is cancelled </summary>
        </member>
        <member name="M:AInq.Background.Wrappers.IScheduledTaskWrapper.ExecuteAsync(System.IServiceProvider,Microsoft.Extensions.Logging.ILogger,System.Threading.CancellationToken)">
            <summary> Execute task asynchronously </summary>
            <param name="provider"> Service provider instance </param>
            <param name="logger"> Logger instance </param>
            <param name="cancellation"> Cancellation token </param>
            <returns> If task should be reverted to scheduler </returns>
        </member>
        <member name="T:AInq.Background.Wrappers.RepeatedWorkWrapperFactory">
            <summary> Factory class for creating <see cref="T:AInq.Background.Wrappers.IScheduledTaskWrapper" /> for repeated work </summary>
        </member>
        <member name="M:AInq.Background.Wrappers.RepeatedWorkWrapperFactory.CreateRepeatedWorkWrapper(AInq.Background.Tasks.IWork,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Create <see cref="T:AInq.Background.Wrappers.IScheduledTaskWrapper" /> for given <paramref name="work" /> scheduled to <paramref name="startTime" /> </summary>
            <param name="work"> Work instance </param>
            <param name="startTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or
                <paramref name="execCount" /> is 0 or less then -1
            </exception>
            <returns> Wrapper and work result observable </returns>
        </member>
        <member name="M:AInq.Background.Wrappers.RepeatedWorkWrapperFactory.CreateRepeatedWorkWrapper``1(AInq.Background.Tasks.IWork{``0},System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Create <see cref="T:AInq.Background.Wrappers.IScheduledTaskWrapper" /> for given <paramref name="work" /> scheduled to <paramref name="startTime" /> </summary>
            <param name="work"> Work instance </param>
            <param name="startTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or
                <paramref name="execCount" /> is 0 or less then -1
            </exception>
            <returns> Wrapper and work result observable </returns>
        </member>
        <member name="M:AInq.Background.Wrappers.RepeatedWorkWrapperFactory.CreateRepeatedWorkWrapper(AInq.Background.Tasks.IAsyncWork,System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Create <see cref="T:AInq.Background.Wrappers.IScheduledTaskWrapper" /> for given <paramref name="asyncWork" /> scheduled to <paramref name="startTime" /> </summary>
            <param name="asyncWork"> Work instance </param>
            <param name="startTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="asyncWork" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or
                <paramref name="execCount" /> is 0 or less then -1
            </exception>
            <returns> Wrapper and work result observable </returns>
        </member>
        <member name="M:AInq.Background.Wrappers.RepeatedWorkWrapperFactory.CreateRepeatedWorkWrapper``1(AInq.Background.Tasks.IAsyncWork{``0},System.DateTime,System.TimeSpan,System.Threading.CancellationToken,System.Int32)">
            <summary> Create <see cref="T:AInq.Background.Wrappers.IScheduledTaskWrapper" /> for given <paramref name="asyncWork" /> scheduled to <paramref name="startTime" /> </summary>
            <param name="asyncWork"> Work instance </param>
            <param name="startTime"> Work first execution time </param>
            <param name="repeatDelay"> Work repeat delay </param>
            <param name="cancellation"> Work cancellation token </param>
            <param name="execCount"> Max work execution count (-1 for unlimited) </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="asyncWork" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="repeatDelay" /> isn't greater then 00:00:00.000 or
                <paramref name="execCount" /> is 0 or less then -1
            </exception>
            <returns> Wrapper and work result observable </returns>
        </member>
        <member name="T:AInq.Background.Wrappers.ScheduledWorkWrapperFactory">
            <summary> Factory class for creating <see cref="T:AInq.Background.Wrappers.IScheduledTaskWrapper" /> for once scheduled work </summary>
        </member>
        <member name="M:AInq.Background.Wrappers.ScheduledWorkWrapperFactory.CreateScheduledWorkWrapper(AInq.Background.Tasks.IWork,System.DateTime,System.Threading.CancellationToken)">
            <summary> Create <see cref="T:AInq.Background.Wrappers.IScheduledTaskWrapper" /> for given <paramref name="work" /> scheduled to <paramref name="time" /> </summary>
            <param name="work"> Work instance </param>
            <param name="time"> Scheduled time </param>
            <param name="cancellation"> Work cancellation token </param>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> is less or equal to current time </exception>
            <returns> Wrapper and work result task </returns>
        </member>
        <member name="M:AInq.Background.Wrappers.ScheduledWorkWrapperFactory.CreateScheduledWorkWrapper``1(AInq.Background.Tasks.IWork{``0},System.DateTime,System.Threading.CancellationToken)">
            <summary> Create <see cref="T:AInq.Background.Wrappers.IScheduledTaskWrapper" /> for given <paramref name="work" /> scheduled to <paramref name="time" /> </summary>
            <param name="work"> Work instance </param>
            <param name="time"> Scheduled time </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="work" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> is less or equal to current time </exception>
            <returns> Wrapper and work result task </returns>
        </member>
        <member name="M:AInq.Background.Wrappers.ScheduledWorkWrapperFactory.CreateScheduledWorkWrapper(AInq.Background.Tasks.IAsyncWork,System.DateTime,System.Threading.CancellationToken)">
            <summary> Create <see cref="T:AInq.Background.Wrappers.IScheduledTaskWrapper" /> for given <paramref name="asyncWork" /> scheduled to <paramref name="time" /> </summary>
            <param name="asyncWork"> Work instance </param>
            <param name="time"> Scheduled time </param>
            <param name="cancellation"> Work cancellation token </param>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="asyncWork" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> is less or equal to current time </exception>
            <returns> Wrapper and work result task </returns>
        </member>
        <member name="M:AInq.Background.Wrappers.ScheduledWorkWrapperFactory.CreateScheduledWorkWrapper``1(AInq.Background.Tasks.IAsyncWork{``0},System.DateTime,System.Threading.CancellationToken)">
            <summary> Create <see cref="T:AInq.Background.Wrappers.IScheduledTaskWrapper" /> for given <paramref name="asyncWork" /> scheduled to <paramref name="time" /> </summary>
            <param name="asyncWork"> Work instance </param>
            <param name="time"> Scheduled time </param>
            <param name="cancellation"> Work cancellation token </param>
            <typeparam name="TResult"> Work result type </typeparam>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="asyncWork" /> is NULL </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if <paramref name="time" /> is less or equal to current time </exception>
            <returns> Wrapper and work result task </returns>
        </member>
    </members>
</doc>
