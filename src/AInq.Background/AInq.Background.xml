<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AInq.Background</name>
    </assembly>
    <members>
        <member name="T:AInq.Background.AccessQueueInjection">
            <summary> Shared resource Access Queue dependency injection </summary>
        </member>
        <member name="M:AInq.Background.AccessQueueInjection.CreateAccessQueue``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,``0,System.Int32)">
            <summary> Create <see cref="T:AInq.Background.IAccessQueue`1"/> with single static shared resource without service registration </summary>
            <param name="services"> Service collection </param>
            <param name="resource"> Shared resource instance </param>
            <param name="maxAttempts"> Max allowed retry on fail attempts </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="resource"/> is NULL </exception>
        </member>
        <member name="M:AInq.Background.AccessQueueInjection.AddAccessQueue``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,``0,System.Int32)">
            <summary> Add <see cref="T:AInq.Background.IAccessQueue`1"/> service with single static shared resource </summary>
            <param name="services"> Service collection </param>
            <param name="resource"> Shared resource instance </param>
            <param name="maxAttempts"> Max allowed retry on fail attempts </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <exception cref="T:System.InvalidOperationException"> Thrown if service already exists </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="resource"/> is NULL </exception>
        </member>
        <member name="M:AInq.Background.AccessQueueInjection.CreatePriorityAccessQueue``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,``0,System.Int32,System.Int32)">
            <summary> Create <see cref="T:AInq.Background.IPriorityAccessQueue`1"/> with single static shared resource without service registration </summary>
            <param name="services"> Service collection </param>
            <param name="resource"> Shared resource instance </param>
            <param name="maxPriority"> Max allowed operation priority </param>
            <param name="maxAttempts"> Max allowed retry on fail attempts </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="resource"/> is NULL </exception>
        </member>
        <member name="M:AInq.Background.AccessQueueInjection.AddPriorityAccessQueue``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,``0,System.Int32,System.Int32)">
            <summary> Add <see cref="T:AInq.Background.IPriorityAccessQueue`1"/> and <see cref="T:AInq.Background.IAccessQueue`1"/> services with single static shared resource </summary>
            <param name="services"> Service collection </param>
            <param name="resource"> Shared resource instance </param>
            <param name="maxPriority"> Max allowed operation priority </param>
            <param name="maxAttempts"> Max allowed retry on fail attempts </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <exception cref="T:System.InvalidOperationException"> Thrown if service already exists </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="resource"/> is NULL </exception>
        </member>
        <member name="M:AInq.Background.AccessQueueInjection.CreateAccessQueue``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary> Create <see cref="T:AInq.Background.IAccessQueue`1"/> with static shared resources without service registration </summary>
            <param name="services"> Service collection </param>
            <param name="resources"> Shared resources collection </param>
            <param name="maxAttempts"> Max allowed retry on fail attempts </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="resources"/> is NULL </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="resources"/> collection is empty </exception>
        </member>
        <member name="M:AInq.Background.AccessQueueInjection.AddAccessQueue``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary> Add <see cref="T:AInq.Background.IAccessQueue`1"/> service with static shared resources </summary>
            <param name="services"> Service collection </param>
            <param name="resources"> Shared resources collection </param>
            <param name="maxAttempts"> Max allowed retry on fail attempts </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <exception cref="T:System.InvalidOperationException"> Thrown if service already exists </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="resources"/> is NULL </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="resources"/> collection is empty </exception>
        </member>
        <member name="M:AInq.Background.AccessQueueInjection.CreatePriorityAccessQueue``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary> Create <see cref="T:AInq.Background.IPriorityAccessQueue`1"/> with static shared resources without service registration </summary>
            <param name="services"> Service collection </param>
            <param name="resources"> Shared resources collection </param>
            <param name="maxPriority"> Max allowed operation priority </param>
            <param name="maxAttempts"> Max allowed retry on fail attempts </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="resources"/> is NULL </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="resources"/> collection is empty </exception>
        </member>
        <member name="M:AInq.Background.AccessQueueInjection.AddPriorityAccessQueue``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary> Add <see cref="T:AInq.Background.IPriorityAccessQueue`1"/> and <see cref="T:AInq.Background.IAccessQueue`1"/> services with static shared resources </summary>
            <param name="services"> Service collection </param>
            <param name="resources"> Shared resources collection </param>
            <param name="maxPriority"> Max allowed operation priority </param>
            <param name="maxAttempts"> Max allowed retry on fail attempts </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <exception cref="T:System.InvalidOperationException"> Thrown if service already exists </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="resources"/> is NULL </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="resources"/> collection is empty </exception>
        </member>
        <member name="M:AInq.Background.AccessQueueInjection.CreateAccessQueue``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0},AInq.Background.ReuseStrategy,System.Int32,System.Int32)">
            <summary> Create <see cref="T:AInq.Background.IAccessQueue`1"/> with given shared resources reuse strategy without service registration </summary>
            <param name="services"> Service collection </param>
            <param name="resourceFabric"> Shared resource fabric function </param>
            <param name="strategy"> Conveyor machines reuse strategy <seealso cref="T:AInq.Background.ReuseStrategy"/></param>
            <param name="maxResourceInstances"> Max allowed shared resource instances count </param>
            <param name="maxAttempts"> Max allowed retry on fail attempts </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="resourceFabric"/> is NULL </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"> Thrown if <paramref name="strategy"/> has incorrect value </exception>
        </member>
        <member name="M:AInq.Background.AccessQueueInjection.AddAccessQueue``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0},AInq.Background.ReuseStrategy,System.Int32,System.Int32)">
            <summary> Add <see cref="T:AInq.Background.IAccessQueue`1"/> service with given shared resources reuse strategy </summary>
            <param name="services"> Service collection </param>
            <param name="resourceFabric"> Shared resource fabric function </param>
            <param name="strategy"> Conveyor machines reuse strategy <seealso cref="T:AInq.Background.ReuseStrategy"/></param>
            <param name="maxResourceInstances"> Max allowed shared resource instances count </param>
            <param name="maxAttempts"> Max allowed retry on fail attempts </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <exception cref="T:System.InvalidOperationException"> Thrown if service already exists </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="resourceFabric"/> is NULL </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"> Thrown if <paramref name="strategy"/> has incorrect value </exception>
        </member>
        <member name="M:AInq.Background.AccessQueueInjection.CreatePriorityAccessQueue``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0},AInq.Background.ReuseStrategy,System.Int32,System.Int32,System.Int32)">
            <summary> Create <see cref="T:AInq.Background.IPriorityAccessQueue`1"/> with given shared resources reuse strategy without service registration </summary>
            <param name="services"> Service collection </param>
            <param name="resourceFabric"> Shared resource fabric function </param>
            <param name="strategy"> Conveyor machines reuse strategy <seealso cref="T:AInq.Background.ReuseStrategy"/></param>
            <param name="maxResourceInstances"> Max allowed shared resource instances count </param>
            <param name="maxPriority"> Max allowed operation priority </param>
            <param name="maxAttempts"> Max allowed retry on fail attempts </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="resourceFabric"/> is NULL </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"> Thrown if <paramref name="strategy"/> has incorrect value </exception>
        </member>
        <member name="M:AInq.Background.AccessQueueInjection.AddPriorityAccessQueue``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0},AInq.Background.ReuseStrategy,System.Int32,System.Int32,System.Int32)">
            <summary> Add <see cref="T:AInq.Background.IPriorityAccessQueue`1"/> and <see cref="T:AInq.Background.IAccessQueue`1"/> services with given shared resources reuse strategy </summary>
            <param name="services"> Service collection </param>
            <param name="resourceFabric"> Shared resource fabric function </param>
            <param name="strategy"> Conveyor machines reuse strategy <seealso cref="T:AInq.Background.ReuseStrategy"/></param>
            <param name="maxResourceInstances"> Max allowed shared resource instances count </param>
            <param name="maxPriority"> Max allowed operation priority </param>
            <param name="maxAttempts"> Max allowed retry on fail attempts </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <exception cref="T:System.InvalidOperationException"> Thrown if service already exists </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="resourceFabric"/> is NULL </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"> Thrown if <paramref name="strategy"/> has incorrect value </exception>
        </member>
        <member name="M:AInq.Background.AccessQueueInjection.CreateAccessQueue``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,AInq.Background.ReuseStrategy,System.Int32,System.Int32)">
            <summary> Create <see cref="T:AInq.Background.IAccessQueue`1"/> with given shared resources reuse strategy without service registration </summary>
            <param name="services"> Service collection </param>
            <param name="strategy"> Conveyor machines reuse strategy <seealso cref="T:AInq.Background.ReuseStrategy"/></param>
            <param name="maxResourceInstances"> Max allowed shared resource instances count </param>
            <param name="maxAttempts"> Max allowed retry on fail attempts </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"> Thrown if <paramref name="strategy"/> has incorrect value </exception>
        </member>
        <member name="M:AInq.Background.AccessQueueInjection.AddAccessQueue``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,AInq.Background.ReuseStrategy,System.Int32,System.Int32)">
            <summary> Add <see cref="T:AInq.Background.IAccessQueue`1"/> service with given shared resources reuse strategy </summary>
            <param name="services"> Service collection </param>
            <param name="strategy"> Conveyor machines reuse strategy <seealso cref="T:AInq.Background.ReuseStrategy"/></param>
            <param name="maxResourceInstances"> Max allowed shared resource instances count </param>
            <param name="maxAttempts"> Max allowed retry on fail attempts </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <exception cref="T:System.InvalidOperationException"> Thrown if service already exists </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"> Thrown if <paramref name="strategy"/> has incorrect value </exception>
        </member>
        <member name="M:AInq.Background.AccessQueueInjection.CreatePriorityAccessQueue``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,AInq.Background.ReuseStrategy,System.Int32,System.Int32,System.Int32)">
            <summary> Create <see cref="T:AInq.Background.IPriorityAccessQueue`1"/> with given shared resources reuse strategy without service registration </summary>
            <param name="services"> Service collection </param>
            <param name="strategy"> Conveyor machines reuse strategy <seealso cref="T:AInq.Background.ReuseStrategy"/></param>
            <param name="maxResourceInstances"> Max allowed shared resource instances count </param>
            <param name="maxPriority"> Max allowed operation priority </param>
            <param name="maxAttempts"> Max allowed retry on fail attempts </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <exception cref="T:System.InvalidOperationException"> Thrown if service already exists </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"> Thrown if <paramref name="strategy"/> has incorrect value </exception>
        </member>
        <member name="M:AInq.Background.AccessQueueInjection.AddPriorityAccessQueue``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,AInq.Background.ReuseStrategy,System.Int32,System.Int32,System.Int32)">
            <summary> Add <see cref="T:AInq.Background.IPriorityAccessQueue`1"/> and <see cref="T:AInq.Background.IAccessQueue`1"/> services with given shared resources reuse strategy </summary>
            <param name="services"> Service collection </param>
            <param name="strategy"> Conveyor machines reuse strategy <seealso cref="T:AInq.Background.ReuseStrategy"/></param>
            <param name="maxResourceInstances"> Max allowed shared resource instances count </param>
            <param name="maxPriority"> Max allowed operation priority </param>
            <param name="maxAttempts"> Max allowed retry on fail attempts </param>
            <typeparam name="TResource"> Shared resource type </typeparam>
            <exception cref="T:System.InvalidOperationException"> Thrown if service already exists </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"> Thrown if <paramref name="strategy"/> has incorrect value </exception>
        </member>
        <member name="T:AInq.Background.ConveyorInjection">
            <summary> Background data processing Conveyor dependency injection </summary>
        </member>
        <member name="M:AInq.Background.ConveyorInjection.CreateConveyor``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,AInq.Background.IConveyorMachine{``0,``1},System.Int32)">
            <summary> Create <see cref="T:AInq.Background.IConveyor`2"/> with single static conveyor machine without service registration </summary>
            <param name="services"> Service collection </param>
            <param name="conveyorMachine"> Conveyor machine instance </param>
            <param name="maxAttempts"> Max allowed retry on fail attempts </param>
            <typeparam name="TData"> Input data type </typeparam>
            <typeparam name="TResult"> Processing result type </typeparam>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="conveyorMachine"/> is NULL </exception>
        </member>
        <member name="M:AInq.Background.ConveyorInjection.AddConveyor``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,AInq.Background.IConveyorMachine{``0,``1},System.Int32)">
            <summary> Add <see cref="T:AInq.Background.IConveyor`2"/> service with single static conveyor machine </summary>
            <param name="services"> Service collection </param>
            <param name="conveyorMachine"> Conveyor machine instance </param>
            <param name="maxAttempts"> Max allowed retry on fail attempts </param>
            <typeparam name="TData"> Input data type </typeparam>
            <typeparam name="TResult"> Processing result type </typeparam>
            <exception cref="T:System.InvalidOperationException"> Thrown if service already exists </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="conveyorMachine"/> is NULL </exception>
        </member>
        <member name="M:AInq.Background.ConveyorInjection.CreatePriorityConveyor``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,AInq.Background.IConveyorMachine{``0,``1},System.Int32,System.Int32)">
            <summary> Create <see cref="T:AInq.Background.IPriorityConveyor`2"/> with single static conveyor machine without service registration </summary>
            <param name="services"> Service collection </param>
            <param name="conveyorMachine"> Conveyor machine instance </param>
            <param name="maxPriority"> Max allowed operation priority </param>
            <param name="maxAttempts"> Max allowed retry on fail attempts </param>
            <typeparam name="TData"> Input data type </typeparam>
            <typeparam name="TResult"> Processing result type </typeparam>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="conveyorMachine"/> is NULL </exception>
        </member>
        <member name="M:AInq.Background.ConveyorInjection.AddPriorityConveyor``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,AInq.Background.IConveyorMachine{``0,``1},System.Int32,System.Int32)">
            <summary> Add <see cref="T:AInq.Background.IPriorityConveyor`2"/> and <see cref="T:AInq.Background.IConveyor`2"/> services with single static conveyor machine </summary>
            <param name="services"> Service collection </param>
            <param name="conveyorMachine"> Conveyor machine instance </param>
            <param name="maxPriority"> Max allowed operation priority </param>
            <param name="maxAttempts"> Max allowed retry on fail attempts </param>
            <typeparam name="TData"> Input data type </typeparam>
            <typeparam name="TResult"> Processing result type </typeparam>
            <exception cref="T:System.InvalidOperationException"> Thrown if service already exists </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="conveyorMachine"/> is NULL </exception>
        </member>
        <member name="M:AInq.Background.ConveyorInjection.CreateConveyor``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.IEnumerable{AInq.Background.IConveyorMachine{``0,``1}},System.Int32)">
            <summary> Create <see cref="T:AInq.Background.IConveyor`2"/> with static conveyor machines without service registration </summary>
            <param name="services"> Service collection </param>
            <param name="conveyorMachines"> Conveyor machines collection </param>
            <param name="maxAttempts"> Max allowed retry on fail attempts </param>
            <typeparam name="TData"> Input data type </typeparam>
            <typeparam name="TResult"> Processing result type </typeparam>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="conveyorMachines"/> is NULL </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="conveyorMachines"/> collection is empty </exception>
        </member>
        <member name="M:AInq.Background.ConveyorInjection.AddConveyor``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.IEnumerable{AInq.Background.IConveyorMachine{``0,``1}},System.Int32)">
            <summary> Add <see cref="T:AInq.Background.IConveyor`2"/> service with static conveyor machines </summary>
            <param name="services"> Service collection </param>
            <param name="conveyorMachines"> Conveyor machines collection </param>
            <param name="maxAttempts"> Max allowed retry on fail attempts </param>
            <typeparam name="TData"> Input data type </typeparam>
            <typeparam name="TResult"> Processing result type </typeparam>
            <exception cref="T:System.InvalidOperationException"> Thrown if service already exists </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="conveyorMachines"/> is NULL </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="conveyorMachines"/> collection is empty </exception>
        </member>
        <member name="M:AInq.Background.ConveyorInjection.CreatePriorityConveyor``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.IEnumerable{AInq.Background.IConveyorMachine{``0,``1}},System.Int32,System.Int32)">
            <summary> Create <see cref="T:AInq.Background.IPriorityConveyor`2"/> with static conveyor machines without service registration </summary>
            <param name="services"> Service collection </param>
            <param name="conveyorMachines"> Conveyor machines collection </param>
            <param name="maxPriority"> Max allowed operation priority </param>
            <param name="maxAttempts"> Max allowed retry on fail attempts </param>
            <typeparam name="TData"> Input data type </typeparam>
            <typeparam name="TResult"> Processing result type </typeparam>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="conveyorMachines"/> is NULL </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="conveyorMachines"/> collection is empty </exception>
        </member>
        <member name="M:AInq.Background.ConveyorInjection.AddPriorityConveyor``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.IEnumerable{AInq.Background.IConveyorMachine{``0,``1}},System.Int32,System.Int32)">
            <summary> Add <see cref="T:AInq.Background.IPriorityConveyor`2"/> and <see cref="T:AInq.Background.IConveyor`2"/> services with static conveyor machines </summary>
            <param name="services"> Service collection </param>
            <param name="conveyorMachines"> Conveyor machines collection </param>
            <param name="maxPriority"> Max allowed operation priority </param>
            <param name="maxAttempts"> Max allowed retry on fail attempts </param>
            <typeparam name="TData"> Input data type </typeparam>
            <typeparam name="TResult"> Processing result type </typeparam>
            <exception cref="T:System.InvalidOperationException"> Thrown if service already exists </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="conveyorMachines"/> is NULL </exception>
            <exception cref="T:System.ArgumentException"> Thrown if <paramref name="conveyorMachines"/> collection is empty </exception>
        </member>
        <member name="M:AInq.Background.ConveyorInjection.CreateConveyor``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,AInq.Background.IConveyorMachine{``0,``1}},AInq.Background.ReuseStrategy,System.Int32,System.Int32)">
            <summary> Create <see cref="T:AInq.Background.IConveyor`2"/> with given conveyor machines reuse strategy without service registration </summary>
            <param name="services"> Service collection </param>
            <param name="conveyorMachineFabric"> Conveyor machine fabric function </param>
            <param name="strategy"> Conveyor machines reuse strategy <seealso cref="T:AInq.Background.ReuseStrategy"/></param>
            <param name="maxParallelMachines"> Max allowed parallel conveyor machines </param>
            <param name="maxAttempts"> Max allowed retry on fail attempts </param>
            <typeparam name="TData"> Input data type </typeparam>
            <typeparam name="TResult"> Processing result type </typeparam>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="conveyorMachineFabric"/> is NULL </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"> Thrown if <paramref name="strategy"/> has incorrect value </exception>
        </member>
        <member name="M:AInq.Background.ConveyorInjection.AddConveyor``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,AInq.Background.IConveyorMachine{``0,``1}},AInq.Background.ReuseStrategy,System.Int32,System.Int32)">
            <summary> Add <see cref="T:AInq.Background.IConveyor`2"/> service with given conveyor machines reuse strategy </summary>
            <param name="services"> Service collection </param>
            <param name="conveyorMachineFabric"> Conveyor machine fabric function </param>
            <param name="strategy"> Conveyor machines reuse strategy <seealso cref="T:AInq.Background.ReuseStrategy"/></param>
            <param name="maxParallelMachines"> Max allowed parallel conveyor machines </param>
            <param name="maxAttempts"> Max allowed retry on fail attempts </param>
            <typeparam name="TData"> Input data type </typeparam>
            <typeparam name="TResult"> Processing result type </typeparam>
            <exception cref="T:System.InvalidOperationException"> Thrown if service already exists </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="conveyorMachineFabric"/> is NULL </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"> Thrown if <paramref name="strategy"/> has incorrect value </exception>
        </member>
        <member name="M:AInq.Background.ConveyorInjection.CreatePriorityConveyor``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,AInq.Background.IConveyorMachine{``0,``1}},AInq.Background.ReuseStrategy,System.Int32,System.Int32,System.Int32)">
            <summary> Create <see cref="T:AInq.Background.IPriorityConveyor`2"/> with given conveyor machines reuse strategy without service registration </summary>
            <param name="services"> Service collection </param>
            <param name="conveyorMachineFabric"> Conveyor machine fabric function </param>
            <param name="strategy"> Conveyor machines reuse strategy <seealso cref="T:AInq.Background.ReuseStrategy"/></param>
            <param name="maxParallelMachines"> Max allowed parallel conveyor machines </param>
            <param name="maxPriority"> Max allowed operation priority </param>
            <param name="maxAttempts"> Max allowed retry on fail attempts </param>
            <typeparam name="TData"> Input data type </typeparam>
            <typeparam name="TResult"> Processing result type </typeparam>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="conveyorMachineFabric"/> is NULL </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"> Thrown if <paramref name="strategy"/> has incorrect value </exception>
        </member>
        <member name="M:AInq.Background.ConveyorInjection.AddPriorityConveyor``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,AInq.Background.IConveyorMachine{``0,``1}},AInq.Background.ReuseStrategy,System.Int32,System.Int32,System.Int32)">
            <summary> Add <see cref="T:AInq.Background.IPriorityConveyor`2"/> and <see cref="T:AInq.Background.IConveyor`2"/> services with given conveyor machines reuse strategy </summary>
            <param name="services"> Service collection </param>
            <param name="conveyorMachineFabric"> Conveyor machine fabric function </param>
            <param name="strategy"> Conveyor machines reuse strategy <seealso cref="T:AInq.Background.ReuseStrategy"/></param>
            <param name="maxParallelMachines"> Max allowed parallel conveyor machines </param>
            <param name="maxPriority"> Max allowed operation priority </param>
            <param name="maxAttempts"> Max allowed retry on fail attempts </param>
            <typeparam name="TData"> Input data type </typeparam>
            <typeparam name="TResult"> Processing result type </typeparam>
            <exception cref="T:System.InvalidOperationException"> Thrown if service already exists </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if <paramref name="conveyorMachineFabric"/> is NULL </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"> Thrown if <paramref name="strategy"/> has incorrect value </exception>
        </member>
        <member name="M:AInq.Background.ConveyorInjection.CreateConveyor``3(Microsoft.Extensions.DependencyInjection.IServiceCollection,AInq.Background.ReuseStrategy,System.Int32,System.Int32)">
            <summary> Create <see cref="T:AInq.Background.IConveyor`2"/> with given conveyor machines reuse strategy without service registration </summary>
            <param name="services"> Service collection </param>
            <param name="strategy"> Conveyor machines reuse strategy <seealso cref="T:AInq.Background.ReuseStrategy"/></param>
            <param name="maxParallelMachines"> Max allowed parallel conveyor machines </param>
            <param name="maxAttempts"> Max allowed retry on fail attempts </param>
            <typeparam name="TData"> Input data type </typeparam>
            <typeparam name="TResult"> Processing result type </typeparam>
            <typeparam name="TConveyorMachine"> Conveyor machine type </typeparam>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"> Thrown if <paramref name="strategy"/> has incorrect value </exception>
        </member>
        <member name="M:AInq.Background.ConveyorInjection.AddConveyor``3(Microsoft.Extensions.DependencyInjection.IServiceCollection,AInq.Background.ReuseStrategy,System.Int32,System.Int32)">
            <summary> Add <see cref="T:AInq.Background.IConveyor`2"/> service with given conveyor machines reuse strategy </summary>
            <param name="services"> Service collection </param>
            <param name="strategy"> Conveyor machines reuse strategy <seealso cref="T:AInq.Background.ReuseStrategy"/></param>
            <param name="maxParallelMachines"> Max allowed parallel conveyor machines </param>
            <param name="maxAttempts"> Max allowed retry on fail attempts </param>
            <typeparam name="TData"> Input data type </typeparam>
            <typeparam name="TResult"> Processing result type </typeparam>
            <typeparam name="TConveyorMachine"> Conveyor machine type </typeparam>
            <exception cref="T:System.InvalidOperationException"> Thrown if service already exists </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"> Thrown if <paramref name="strategy"/> has incorrect value </exception>
        </member>
        <member name="M:AInq.Background.ConveyorInjection.CreatePriorityConveyor``3(Microsoft.Extensions.DependencyInjection.IServiceCollection,AInq.Background.ReuseStrategy,System.Int32,System.Int32,System.Int32)">
            <summary> Create <see cref="T:AInq.Background.IPriorityConveyor`2"/> with given conveyor machines reuse strategy without service registration </summary>
            <param name="services"> Service collection </param>
            <param name="strategy"> Conveyor machines reuse strategy <seealso cref="T:AInq.Background.ReuseStrategy"/></param>
            <param name="maxParallelMachines"> Max allowed parallel conveyor machines </param>
            <param name="maxPriority"> Max allowed operation priority </param>
            <param name="maxAttempts"> Max allowed retry on fail attempts </param>
            <typeparam name="TData"> Input data type </typeparam>
            <typeparam name="TResult"> Processing result type </typeparam>
            <typeparam name="TConveyorMachine"> Conveyor machine type </typeparam>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"> Thrown if <paramref name="strategy"/> has incorrect value </exception>
        </member>
        <member name="M:AInq.Background.ConveyorInjection.AddPriorityConveyor``3(Microsoft.Extensions.DependencyInjection.IServiceCollection,AInq.Background.ReuseStrategy,System.Int32,System.Int32,System.Int32)">
            <summary> Add <see cref="T:AInq.Background.IPriorityConveyor`2"/> and <see cref="T:AInq.Background.IConveyor`2"/> services with given conveyor machines reuse strategy </summary>
            <param name="services"> Service collection </param>
            <param name="strategy"> Conveyor machines reuse strategy <seealso cref="T:AInq.Background.ReuseStrategy"/></param>
            <param name="maxParallelMachines"> Max allowed parallel conveyor machines </param>
            <param name="maxPriority"> Max allowed operation priority </param>
            <param name="maxAttempts"> Max allowed retry on fail attempts </param>
            <typeparam name="TData"> Input data type </typeparam>
            <typeparam name="TResult"> Processing result type </typeparam>
            <typeparam name="TConveyorMachine"> Conveyor machine type </typeparam>
            <exception cref="T:System.InvalidOperationException"> Thrown if service already exists </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"> Thrown if <paramref name="strategy"/> has incorrect value </exception>
        </member>
        <member name="T:AInq.Background.ReuseStrategy">
            <summary>
            Reuse strategy for Shared Resources and Conveyor Machines
            </summary>
        </member>
        <member name="F:AInq.Background.ReuseStrategy.Static">
            <summary>
            Generate once at startup and reuse
            </summary>
        </member>
        <member name="F:AInq.Background.ReuseStrategy.Reuse">
            <summary>
            Generate new for each actions batch, reuse in batch
            </summary>
        </member>
        <member name="F:AInq.Background.ReuseStrategy.OneTime">
            <summary>
            Generate new for each action
            </summary>
        </member>
        <member name="T:AInq.Background.StartupWorkInjection">
            <summary> Startup work injection </summary>
        </member>
        <member name="M:AInq.Background.StartupWorkInjection.DoStartupWork(Microsoft.Extensions.Hosting.IHost,System.Threading.CancellationToken)">
            <summary> Run registered startup works asynchronously </summary>
            <param name="host"> Current host </param>
            <param name="cancellation"> Startup work cancellation token </param>
            <returns></returns>
        </member>
        <member name="M:AInq.Background.StartupWorkInjection.AddStartupWork(Microsoft.Extensions.DependencyInjection.IServiceCollection,AInq.Background.IWork)">
            <summary> Register startup work </summary>
            <param name="services"> Service collection </param>
            <param name="work"> Work instance </param>
        </member>
        <member name="M:AInq.Background.StartupWorkInjection.AddStartupWork``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary> Register startup work </summary>
            <param name="services"> Service collection </param>
            <typeparam name="TWork"> Work type </typeparam>
        </member>
        <member name="M:AInq.Background.StartupWorkInjection.AddStartupWork``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,AInq.Background.IWork{``0})">
            <summary> Register startup work </summary>
            <param name="services"> Service collection </param>
            <param name="work"> Work instance </param>
            <typeparam name="TResult"> Work result type </typeparam>
        </member>
        <member name="M:AInq.Background.StartupWorkInjection.AddStartupWork``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary> Register startup work </summary>
            <param name="services"> Service collection </param>
            <typeparam name="TWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
        </member>
        <member name="M:AInq.Background.StartupWorkInjection.AddStartupAsyncWork(Microsoft.Extensions.DependencyInjection.IServiceCollection,AInq.Background.IAsyncWork)">
            <summary> Register asynchronous startup work </summary>
            <param name="services"> Service collection </param>
            <param name="work"> Work instance </param>
        </member>
        <member name="M:AInq.Background.StartupWorkInjection.AddStartupAsyncWork``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary> Register asynchronous startup work </summary>
            <param name="services"> Service collection </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
        </member>
        <member name="M:AInq.Background.StartupWorkInjection.AddStartupAsyncWork``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,AInq.Background.IAsyncWork{``0})">
            <summary> Register asynchronous startup work </summary>
            <param name="services"> Service collection </param>
            <param name="work"> Work instance </param>
        </member>
        <member name="M:AInq.Background.StartupWorkInjection.AddStartupAsyncWork``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary> Register asynchronous startup work </summary>
            <param name="services"> Service collection </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
        </member>
        <member name="M:AInq.Background.StartupWorkInjection.AddStartupQueuedWork(Microsoft.Extensions.DependencyInjection.IServiceCollection,AInq.Background.IWork,System.Int32,System.Int32)">
            <summary> Register queued startup work with given <paramref name="priority"/> (if supported) </summary>
            <remarks> <see cref="T:AInq.Background.IPriorityWorkQueue"/> or <see cref="T:AInq.Background.IWorkQueue"/> service should be registered on host to run queued work </remarks>
            <param name="services"> Service collection </param>
            <param name="work"> Work instance </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
        </member>
        <member name="M:AInq.Background.StartupWorkInjection.AddStartupQueuedWork``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Int32,System.Int32)">
            <summary> Register queued startup work with given <paramref name="priority"/> (if supported) </summary>
            <remarks> <see cref="T:AInq.Background.IPriorityWorkQueue"/> or <see cref="T:AInq.Background.IWorkQueue"/> service should be registered on host to run queued work </remarks>
            <param name="services"> Service collection </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TWork"> Work type </typeparam>
        </member>
        <member name="M:AInq.Background.StartupWorkInjection.AddStartupQueuedWork``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,AInq.Background.IWork{``0},System.Int32,System.Int32)">
            <summary> Register queued startup work with given <paramref name="priority"/> (if supported) </summary>
            <remarks> <see cref="T:AInq.Background.IPriorityWorkQueue"/> or <see cref="T:AInq.Background.IWorkQueue"/> service should be registered on host to run queued work </remarks>
            <param name="services"> Service collection </param>
            <param name="work"> Work instance </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TResult"> Work result type </typeparam>
        </member>
        <member name="M:AInq.Background.StartupWorkInjection.AddStartupQueuedWork``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Int32,System.Int32)">
            <summary> Register queued startup work with given <paramref name="priority"/> (if supported) </summary>
            <remarks> <see cref="T:AInq.Background.IPriorityWorkQueue"/> or <see cref="T:AInq.Background.IWorkQueue"/> service should be registered on host to run queued work </remarks>
            <param name="services"> Service collection </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
        </member>
        <member name="M:AInq.Background.StartupWorkInjection.AddStartupAsyncQueuedWork(Microsoft.Extensions.DependencyInjection.IServiceCollection,AInq.Background.IAsyncWork,System.Int32,System.Int32)">
            <summary> Register asynchronous queued startup work with given <paramref name="priority"/> (if supported) </summary>
            <remarks> <see cref="T:AInq.Background.IPriorityWorkQueue"/> or <see cref="T:AInq.Background.IWorkQueue"/> service should be registered on host to run queued work </remarks>
            <param name="services"> Service collection </param>
            <param name="work"> Work instance </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
        </member>
        <member name="M:AInq.Background.StartupWorkInjection.AddStartupAsyncQueuedWork``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Int32,System.Int32)">
            <summary> Register asynchronous queued startup work with given <paramref name="priority"/> (if supported) </summary>
            <remarks> <see cref="T:AInq.Background.IPriorityWorkQueue"/> or <see cref="T:AInq.Background.IWorkQueue"/> service should be registered on host to run queued work </remarks>
            <param name="services"> Service collection </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
        </member>
        <member name="M:AInq.Background.StartupWorkInjection.AddStartupAsyncQueuedWork``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,AInq.Background.IAsyncWork{``0},System.Int32,System.Int32)">
            <summary> Register asynchronous queued startup work with given <paramref name="priority"/> (if supported) </summary>
            <remarks> <see cref="T:AInq.Background.IPriorityWorkQueue"/> or <see cref="T:AInq.Background.IWorkQueue"/> service should be registered on host to run queued work </remarks>
            <param name="services"> Service collection </param>
            <param name="work"> Work instance </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TResult"> Work result type </typeparam>
        </member>
        <member name="M:AInq.Background.StartupWorkInjection.AddStartupAsyncQueuedWork``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Int32,System.Int32)">
            <summary> Register asynchronous queued startup work with given <paramref name="priority"/> (if supported) </summary>
            <remarks> <see cref="T:AInq.Background.IPriorityWorkQueue"/> or <see cref="T:AInq.Background.IWorkQueue"/> service should be registered on host to run queued work </remarks>
            <param name="services"> Service collection </param>
            <param name="attemptsCount"> Retry on fail attempts count </param>
            <param name="priority"> Work priority </param>
            <typeparam name="TAsyncWork"> Work type </typeparam>
            <typeparam name="TResult"> Work result type </typeparam>
        </member>
        <member name="T:AInq.Background.WorkQueueInjection">
            <summary> Background Work Queue dependency injection </summary>
        </member>
        <member name="M:AInq.Background.WorkQueueInjection.CreateWorkQueue(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Int32,System.Int32)">
            <summary> Create <see cref="T:AInq.Background.IWorkQueue"/> without service registration </summary>
            <param name="services"> Service collection </param>
            <param name="maxParallelWorks"> Max parallel works allowed </param>
            <param name="maxAttempts"> Max allowed retry on fail attempts </param>
        </member>
        <member name="M:AInq.Background.WorkQueueInjection.AddWorkQueue(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Int32,System.Int32)">
            <summary> Add <see cref="T:AInq.Background.IWorkQueue"/> service </summary>
            <param name="services"> Service collection </param>
            <param name="maxParallelWorks"> Max parallel works allowed </param>
            <param name="maxAttempts"> Max allowed retry on fail attempts </param>
            <exception cref="T:System.InvalidOperationException"> Thrown if service already exists </exception>
        </member>
        <member name="M:AInq.Background.WorkQueueInjection.CreatePriorityWorkQueue(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Int32,System.Int32,System.Int32)">
            <summary> Create <see cref="T:AInq.Background.IPriorityWorkQueue"/> without service registration </summary>
            <param name="services"> Service collection </param>
            <param name="maxPriority"> Max allowed work priority </param>
            <param name="maxParallelWorks"> Max allowed parallel works </param>
            <param name="maxAttempts"> Max allowed retry on fail attempts </param>
        </member>
        <member name="M:AInq.Background.WorkQueueInjection.AddPriorityWorkQueue(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Int32,System.Int32,System.Int32)">
            <summary> Add <see cref="T:AInq.Background.IPriorityWorkQueue"/> and <see cref="T:AInq.Background.IWorkQueue"/> services </summary>
            <param name="services"> Service collection </param>
            <param name="maxPriority"> Max allowed work priority </param>
            <param name="maxParallelWorks"> Max allowed parallel works </param>
            <param name="maxAttempts"> Max allowed retry on fail attempts </param>
            <exception cref="T:System.InvalidOperationException"> Thrown if service already exists </exception>
        </member>
    </members>
</doc>
